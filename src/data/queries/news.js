/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright © 2014-2016 Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import { GraphQLList as List } from 'graphql';
import NewsItemType from '../types/NewsItemType';

let items = [{"title":"Routing in React Native with Jake Murzy","link":"https://reactjsnews.com/routing-in-react-native-with-jake-murzy","author":"","publishedDate":"Wed, 28 Sep 2016 10:00:00 -0700","contentSnippet":"Jake Murzy has been hard at work creating a new navigational library for React Native over the last couple of months.  While ...","content":"<p>Jake Murzy has been hard at work creating a new navigational library for React Native over the last couple of months.  While React JS has the benefit of the highly-regarded React Router, such a comprehensive routing solution doesn’t exist yet in the React Native community.  In fact, React Native’s routing landscape has been in constant upheaval for the last year.  The library itself has official three ‘navigators’ for handling decision making on which components to show the user, including ‘NavigatorIOS’, ‘Navigator’, and - more recently - ‘NavigatorExperimental’.  The open source community likewise has the packages ‘React Native Router Flux’, ‘React Native Router Native’, and ‘React Native Redux Router’, which of which are in various states of completion, or, more commonly, disrepair.</p>\n\n<p><a href=\"https://github.com/jmurzy/react-router-native\">React Router Native</a> appears to focus on matching the API of the immensely popular React Router package, even going as far as introducing the concept of a URL into React Native, which bucks the notion that only web applications need or deserve a URL.</p>\n\n<hr>\n\n<p><strong>Today Jake is going to share some of his thoughts about his new library.</strong></p>\n\n<p><strong>Q:  Hi Jake!  The React Native library contains several navigation solutions and the surrounding ecosystem has multiple routing libraries.  What made you decide to make your own?</strong></p>\n\n<p>Hey! Thanks for reaching out. I’ve been eagerly watching what’s happening with navigation on React Native for a while. Until very recently, the whole Navigation scene in React Native was a mess. Navigator was being deprecated in favor of NavigationExperimental and NavigationExperimental wasn’t ready for prime time.</p>\n\n<p>My team was just starting a new project so I tried quite a few of the available solutions. Having successfully used React Router on the web, we were looking for a similar solution. Unfortunately, React Router did not support React Native, and other solutions we found were either very unstable, had a hard time keeping up with upstream changes on each release or the quality of code was quite poor.</p>\n\n<p>NavigationExperimental did most of what we wanted but it was a bit too low level so often times we found ourselves writing navigation related code and you can imagine how this gets tedious fast. The low level nature of NavigationExperimental is really by design to allow abstractions to be built up in higher layers. So to finally answer your question, the project came directly out of my frustration trying to make navigation work on React Native as good as React Router did on the web.</p>\n\n<p><strong>Q:  What is the strength of your routing system?  Is there any type of app that would be a perfect fit with React Router Native?  Conversely, is there any type of app that <em>wouldn’t</em> be a good fit with the library?</strong></p>\n\n<p>The use cases for React Router Native is pretty much the same as NavigationExperimental—which is the only supported navigation library by the React Native team. React Router Native is a very thin layer on top of NavigationExperimental that offers React Router’s mental model in a native app. Under the hood, it uses React Router for routing and NavigationExperimental for rendering user components. This is a very powerful combination that makes URLs possible on mobile.</p>\n\n<p>Most apps do not have deep-linking capabilities because implementing it for each screen in your app is a challenging task. Even within apps, users are often forced to take screenshots to share information. And for many, it’s vital that their apps support deep-linking. For example, Yelp goes as far to show a share prompt when users take screenshots of business listings. React Router Native enables developers to implement deep-linking in their apps without putting forth much effort. This can pave the way for a more connected app ecosystem.</p>\n\n<p>That being said, we’re still in the early days of React Native figuring out the right abstractions. Navigation on mobile is a challenging task, and having different flavors is only healthier as the community weighs the pros and cons of each approach rather than second guessing best-practices. So I’m hoping to get the community involved to shape the direction of the project.</p>\n\n<p><strong>Q:  Is React Router Native designed to be used with any of the official Navigation components written by the React Native team?</strong></p>\n\n<p>Absolutely. One of the primary goals of the project is that we follow React’s “learn once, write anywhere” principle. So you can use the community maintained components, interpolators and pan responders from React Native, and everything is highly customizable if you need instruct NavigationExperimental to do fancy transition animations, etc.</p>\n\n<p><strong>Q:  The React Router team has somewhat famously rewritten their API several times in the last two years, each time introducing several breaking changes.  Do you hope to keep your library at parity with React Router, breaking changes and all?  Case in point, the V4 release of React Router will introduce an all-new API.</strong></p>\n\n<p>React Router v4 is a complete rewrite. There was a lot of head-scratching on Twitter over the entire new set of breaking changes. Many people thought v4 should at best have been released under a different name. I’m not sure if I agree with that sentiment though, I understand where it is coming from. React Router v4 is a preview release, and in my opinion, it’s really hard to argue against replacing a foreign API with simple React components. I do hope to keep the library at parity with React Router, and to be honest, v4’s new everything-is-a-component approach makes the integration even easier. So over the next few weeks I’ll be working on v4 support.</p>\n\n<p><strong>Q: If you were new to React Native, which routing solution would you use?  Why?</strong></p>\n\n<p>This is a hard one to answer. Eric Vicenti has done a great job on NavigationExperimental and most of the issues have been sorted out by the community over the last few months. So if you’re familiar with Redux concepts and comfortable writing your own reducers to manage navigation state, NavigationExperimental is a great choice.</p>\n\n<p>One that I’m surprised you didn’t mention that deserves more attention is ExNavigation—another fairly new addition to the brewery. It also uses NavigationExperimental and is maintained by Adam Miskiewicz, Brent Vatne and other awesome members of the Exponent community. It feels a bit tied to the Exponent platform, but runs perfectly fine on React Native and is open source. So you’ve got that.</p>\n\n<p>Finally, If you’re just getting started with React Native and all you need is to be able to click a button and have it transition to a different scene but you don’t want it to get in your way when you need to reach in and apply complex navigational patterns, I strongly recommend you take React Router Native for a spin.</p>","categories":[]},{"title":"Playing With React and D3","link":"https://reactjsnews.com/playing-with-react-and-d3","author":"","publishedDate":"Thu, 21 Apr 2016 10:00:00 -0700","contentSnippet":"D3 is great at data visualizations, but it manipulates the DOM directly to display that data. Rendering DOM elements is where ...","content":"<p>D3 is great at data visualizations, but it manipulates the DOM directly to display that data. Rendering DOM elements is where React shines. It uses a virtual representation of the DOM (virtual DOM) and a super performant diffing algorithm in order to determine the fastest way to update the DOM. We want to leverage React’s highly efficient, declarative, and reusable components with D3’s data utility functions.</p>\n\n\n\n<p>At this point, we can safely say that  <a href=\"https://facebook.github.io/react/\">React</a> is the preferred JavaScript library for building user interfaces. It is used practically everywhere and is almost as pervasive as <a href=\"https://jquery.com/\">jQuery</a>. It has an API that is simple, powerful, and easy to learn. Its performance metrics are really impressive thanks to the Virtual DOM and its clever <a href=\"https://facebook.github.io/react/docs/reconciliation.html\">diff algorithm</a> between state changes. Nothing, however, is perfect, and React too has its limitations. One of React’s greatest strengths is the ease with which it integrate third-party libraries, but some libraries, especially opinionated ones, are more difficult to integrate than others.</p>\n\n<p>An extremely popular library that can be tricky to integrate with React is <a href=\"https://d3js.org/\">D3.js</a>. D3 is an excellent data visualization library with a rich and powerful API. It is the gold standard of data visualizations. However, Because this library is opinionated about data, it is no trivial endeavour to get it to work with React. A few simple strategies permit these two libraries to work together in very powerful ways.</p>\n\n<p><strong>Editor’s Note</strong>: Check out our upcoming workshop, <a href=\"http://bit.ly/1T0PG3b\">React and D3</a>, a crash course in learning how to create data visualizations with these two in demand libraries. Reserve your spot now on Eventbrite and get 20% off admission. Learn more at the <a href=\"http://bit.ly/1T0PG3b\">Eventbrite page</a></p>\n\n<h2>What is React?</h2>\n\n<p>React is an open-source JavaScript library for creating user interfaces that addresses the challenges of building large applications with data that changes over time. Originally developed at Facebook, it is now seen in many of the most commonly used web applications including Instagram, Netflix, Airbnb, and HelloSign.</p>\n\n<h2>Why is React so popular?</h2>\n\n<p>React helps developers build applications by helping manage the application state. It’s simple, declarative, and composable. React is not a traditional MVC framework because React is really only interested in building user interfaces. Some have called it the “V(iew)” in MVC, but that’s a little misleading. React’s viewpoint is different. As application logic has reoriented toward the client, developers have applied more structure to their front-end JavaScript. We applied a paradigm that we already understood from the server (MVC) to the browser. Of course, the browser environment is very different from the server. React acknowledges that client-side applications are really a collection of UI components that should react to events like user interaction.</p>\n\n<p>React encourages the building applications out of self-contained, reusable components that only care about a small piece of the UI. Other frameworks such as Angular also attempt to do this, but React stands out because it enforces a unidirectional data flow from parent component to child component. This makes debugging much easier. Debugging is the hardest part of application development, so while React is more verbose that other libraries or frameworks, in the end it saves a lot of time. In a framework like Angular’s, it can be hard to figure out where a bug is coming from: The view? The model? The controller? The directive? The directive controller? Data in Angular flows in many different directions, and this makes it hard to reason about that state of your application. In React, when there is a bug (and there will be!), you can quickly determine where the bug originated from because data only moves in one direction. Locating a bug is as simple as connecting the numbered dots until you find the culprit.</p>\n\n<h2>What is D3?</h2>\n\n<p>D3 (Data-Driven Documents) is a JavaScript library for producing dynamic, interactive data-visualizations. It’s fairly low level, and the developer has a lot of control over the end result. It takes a bit of work to get D3 to do what you want, so if you’re looking for a more prepackaged solution, you’re probably better off with highcharts.js. That said, it is fairly simple to pick up once you get the hang of it.</p>\n\n<p>D3 does four main things:</p>\n\n<ol>\n<li>LOADS: D3 has convenient methods for importing data from CSV documents.</li>\n<li>BINDS: D3 binds data elements to the DOM via JavaScript and SVG.</li>\n<li>TRANSFORMS: data can be adjusted to fit your visual requirements</li>\n<li>TRANSITIONS: D3 can respond to user input and animate elements based on that input</li>\n</ol>\n\n<h2>Why Would We Want To Use React with D3?</h2>\n\n<p>D3 is great at data visualizations, but it manipulates the DOM directly to display that data. Rendering DOM elements is where React shines. It uses a virtual representation of the DOM (virtual DOM) and a super performant diffing algorithm in order to determine the fastest way to update the DOM. We want to leverage React’s highly efficient, declarative, and reusable components with D3’s data utility functions. Also, once we create a chart component, we can want to be able to reuse that chart with different data anywhere in our app.</p>\n\n<h2>How to use React and D3?</h2>\n\n<p>D3, like React, is declarative.D3 uses data binding, whereas React uses a unidirectional data flow paradigm. Getting these two libraries to work together takes a bit of work, but the strategy is fairly simple: since SVG lives in the DOM, let React handle displaying SVG representations of the data and lett D3 handle all the math to render the data.</p>\n\n<p>Of course, we’ll have to make compromises. React is unopinionated and flexible, thereby allowing you to accomplish whatever needs to be done. Some tasks, like creating axes, are tedious. We can let D3 directly access the DOM and create. It handles axes well, and since we only need to create very few, this tactic won’t affect performance.</p>\n\n<p>Let’s go through a simple example. I created a repository you can use to follow along here: <a href=\"https://github.com/freddyrangel/playing-with-react-and-d3\">playing-with-react-and-d3</a>. You can follow in the <code>unfinished</code> directory and if you get stuck you can take a look at the <code>finished</code> directory.</p>\n\n<p>Let’s generate a random list of X-Y coordinates and display them on a ScatterPlot chart. If you’re following the tutorial, a finished example is provided for you under the “finished” directory, but you can also follow along under “unfinished.” I’ve gone through the trouble of doing all the setup for you. The build will automatically be created from “unfinished/src/index.jsx”</p>\n\n<p>Let’s start by creating a simple “Hello World!” React component. Create a file under “components” named “chart.jsx”</p>\n<div><pre><code><span>// unfinished/src/components/chart.jsx</span>\n<span>import</span> <span>React</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>return</span> <span>&lt;</span><span>h1</span><span>&gt;</span><span>Hello</span><span>,</span> <span>World</span><span>!&lt;</span><span>/h1&gt;</span><span>;\n</span><span>}</span>\n</code></pre></div>\n<p>This example is simple, but let’s go over the explanation anyway. Since we’re rendering a simple H1 with no state, we can just export a function that returns the HTML we expect. If you’re familiar with Angular or Ember, it might look weird to insert HTML directly into our JS code. On the one hand, this goes against everything we’ve learned about unobtrusive JavaScript. But on the other hand, it actually makes sense: we’re not putting JavaScript in our HTML, we’re putting our HTML into our JavaScript. React sees HTML and client-side JavaScript as fundamentally bonded together. They’re both concerned about one thing – rendering UI components to the user. They simply cannot be separated without losing the ability to see what your component is going at a glance. The great benefits of this approach is that you can describe exactly what your component will look like when it’s rendered.</p>\n\n<p>Also, keep in mind that this is only possible with JSX, which translates HTML elements into React functions that will render the HTML to the page.</p>\n\n<p>Now, let’s move on and mount our component to the DOM. Open up “index.jsx”</p>\n<div><pre><code><span>// unfinished/src/index.jsx</span>\n<span>import</span> <span>'./main.css'</span><span>;</span>\n<span>import</span> <span>React</span>    <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>ReactDOM</span> <span>from</span> <span>'react-dom'</span><span>;</span>\n<span>import</span> <span>Chart</span>    <span>from</span> <span>'./components/chart.jsx'</span><span>;</span>\n\n<span>const</span> <span>mountingPoint</span> <span>=</span> <span>document</span><span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>);</span>\n<span>mountingPoint</span><span>.</span><span>className</span> <span>=</span> <span>'react-app'</span><span>;</span>\n<span>document</span><span>.</span><span>body</span><span>.</span><span>appendChild</span><span>(</span><span>mountingPoint</span><span>);</span>\n<span>ReactDOM</span><span>.</span><span>render</span><span>(</span><span>&lt;</span><span>Chart</span><span>/&gt;</span><span>,</span> <span>mountingPoint</span><span>);</span>\n</code></pre></div>\n<p>You probably noticed a few things. You might be wondering why we’re requiring a CSS file. We’re using Webpack, which allows us to require CSS files. This is very useful when we  modularize both our stylesheets and our JavaScript. We’re also creating a div in which we want to mount our React app. This is just a good practice in case you want to do other things on the page then render a React component. Lastly, we’re calling <code>render</code> on ReactDOM with 2 arguments, the name of the component and the DOM element we want to mount it on.</p>\n\n<p>Now, let’s install all the dependencies by navigating to the <code>unfinished</code> directory and running <code>npm i</code>. Then, fire up the server with <code>npm run start</code> and go to <code>localhost:8080</code></p>\n\n<p><img src=\"https://reactjsnews.com/img/playing-with-react-and-d3/basic_render.png\" alt=\"Basic Render Image\"></p>\n\n<p>Awesome! We have rendered our first React component! Let’s do something a little less trivial now.</p>\n\n<p>Let’s compose some functions that will create an array of random data points and then render a <a href=\"https://en.wikipedia.org/wiki/Scatter_plot\">scatter plot</a>. While we’re at it, we’ll add a button to randomize the dataset and trigger a re-render of our app. Let’s open up our <code>Chart</code> component and add the following:</p>\n<div><pre><code><span>// unfinished/src/components/chart.jsx</span>\n<span>import</span> <span>React</span>       <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>ScatterPlot</span> <span>from</span> <span>'./scatter-plot'</span><span>;</span>\n\n<span>const</span> <span>styles</span> <span>=</span> <span>{</span>\n  <span>width</span>   <span>:</span> <span>500</span><span>,</span>\n  <span>height</span>  <span>:</span> <span>300</span><span>,</span>\n  <span>padding</span> <span>:</span> <span>30</span><span>,</span>\n<span>};</span>\n\n<span>// The number of data points for the chart.</span>\n<span>const</span> <span>numDataPoints</span> <span>=</span> <span>50</span><span>;</span>\n\n<span>// A function that returns a random number from 0 to 1000</span>\n<span>const</span> <span>randomNum</span>     <span>=</span> <span>()</span> <span>=&gt;</span> <span>Math</span><span>.</span><span>floor</span><span>(</span><span>Math</span><span>.</span><span>random</span><span>()</span> <span>*</span> <span>1000</span><span>);</span>\n\n<span>// A function that creates an array of 50 elements of (x, y) coordinates.</span>\n<span>const</span> <span>randomDataSet</span> <span>=</span> <span>()</span> <span>=&gt;</span> <span>{</span>\n  <span>return</span> <span>Array</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> <span>{</span><span>length</span><span>:</span> <span>numDataPoints</span><span>}).</span><span>map</span><span>(()</span> <span>=&gt;</span> <span>[</span><span>randomNum</span><span>(),</span> <span>randomNum</span><span>()]);</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> <span>class</span> <span>Chart</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span><span>{</span>\n  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>props</span><span>);</span>\n    <span>this</span><span>.</span><span>state</span> <span>=</span> <span>{</span> <span>data</span><span>:</span> <span>randomDataSet</span><span>()</span> <span>};</span>\n  <span>}</span>\n\n  <span>randomizeData</span><span>()</span> <span>{</span>\n    <span>this</span><span>.</span><span>setState</span><span>({</span> <span>data</span><span>:</span> <span>randomDataSet</span><span>()</span> <span>});</span>\n  <span>}</span>\n\n  <span>render</span><span>()</span> <span>{</span>\n    <span>return</span> <span>&lt;</span><span>div</span><span>&gt;</span>\n      <span>&lt;</span><span>h1</span><span>&gt;</span><span>Playing</span> <span>With</span> <span>React</span> <span>and</span> <span>D3</span><span>&lt;</span><span>/h1</span><span>&gt;\n</span>      <span>&lt;</span><span>ScatterPlot</span> <span>{...</span><span>this</span><span>.</span><span>state</span><span>}</span> <span>{...</span><span>styles</span><span>}</span> <span>/</span><span>&gt;\n</span>      <span>&lt;</span><span>div</span> <span>className</span><span>=</span><span>\"controls\"</span><span>&gt;</span>\n        <span>&lt;</span><span>button</span> <span>className</span><span>=</span><span>\"btn randomize\"</span> <span>onClick</span><span>=</span><span>{()</span> <span>=&gt;</span> <span>this</span><span>.</span><span>randomizeData</span><span>()}</span><span>&gt;</span>\n          <span>Randomize</span> <span>Data</span>\n        <span>&lt;</span><span>/button</span><span>&gt;\n</span>      <span>&lt;</span><span>/div</span><span>&gt;\n</span>    <span>&lt;</span><span>/div</span><span>&gt;\n</span>  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p>Since we want our component to manage it’s own state, we need to add a bit more code than was necessary for our previous “Hello World” stateless functional component. Instead of just a function, we’re going to extend <code>React.Component</code> and describe our component in the <code>render()</code> method. <code>render()</code> is the heart of any React component. It describes what our component is supposed to looks like. React will call <code>render()</code> on initial mount and on every state change.</p>\n\n<p>Inside of <code>render()</code>, we are both rendering a scatter plot component as if it were an HTML element and setting some properties or “props”. The <code>...</code> syntax is a convenient JSX and ES2015 spread operator that spreads the attributes of an array or object instead of doing all of that explicitly. For more information check out: <a href=\"https://facebook.github.io/react/docs/jsx-spread.html\">JSX Spread Attributes</a>. We’re going to use <code>render()</code> to pass our data and a style object that will be used by some of our child components.</p>\n\n<p>In addition, we’re also rendering a button with an <code>onClick</code> event handler. We’re going to wrap <code>this.randomizeData()</code> with an arrow function and  bind the value of <code>this</code> to our <code>Chart</code> component. When the button is clicked, <code>randomizeData()</code> will call <code>this.setState()</code> and pass in some new data.</p>\n\n<p>Let’s talk about <code>this.setState()</code>. If <code>render()</code> is the heart of a React component, <code>setState()</code> is the brains of a component. <code>setState</code> explicitly tells React that we’re changing the state, thereby triggering a re-render of the component and its children. This essentially turns UI components into state machines.</p>\n\n<p>Inside of <code>setState()</code>, we’re passing an object with <code>data</code> set to the <code>randomDataSet()</code>. This means that if we want to retrieve the state of our application, we need only call <code>this.state.whateverStateWereLookingFor</code>. In this case, we can retrieve the randomData by calling <code>this.state.data</code>.</p>\n\n<p>A little side note on how React works: React offers great performance for rendering UI components by implementing a diff algorithm and comparing a virtual DOM in memory with the actual DOM. When you think about it, the DOM is really a large tree structure. If there’s one thing we have learned from decades of computer science research, it’s how to compare and manipulate trees. React takes advantage of clever tree diffing algorithms, but in order to work, each component can only render one parent element (i.e., you cannot render sibling elements). That’s why In the render function we’re wrapping all our elements in one parent div.</p>\n\n<p>Let’s get started with the scatter plot component. Create a file <code>unfinished/src/components/scatter-plot.jsx</code> :</p>\n<div><pre><code><span>// unfinished/src/components/scatter-plot.jsx</span>\n<span>import</span> <span>React</span>        <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>d3</span>           <span>from</span> <span>'d3'</span><span>;</span>\n<span>import</span> <span>DataCircles</span>  <span>from</span> <span>'./data-circles'</span><span>;</span>\n\n<span>// Returns the largest X coordinate from the data set</span>\n<span>const</span> <span>xMax</span>   <span>=</span> <span>(</span><span>data</span><span>)</span>  <span>=&gt;</span> <span>d3</span><span>.</span><span>max</span><span>(</span><span>data</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span> <span>d</span><span>[</span><span>0</span><span>]);</span>\n\n<span>// Returns the highest Y coordinate from the data set</span>\n<span>const</span> <span>yMax</span>   <span>=</span> <span>(</span><span>data</span><span>)</span>  <span>=&gt;</span> <span>d3</span><span>.</span><span>max</span><span>(</span><span>data</span><span>,</span> <span>(</span><span>d</span><span>)</span> <span>=&gt;</span> <span>d</span><span>[</span><span>1</span><span>]);</span>\n\n<span>// Returns a function that \"scales\" X coordinates from the data to fit the chart</span>\n<span>const</span> <span>xScale</span> <span>=</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>return</span> <span>d3</span><span>.</span><span>scale</span><span>.</span><span>linear</span><span>()</span>\n    <span>.</span><span>domain</span><span>([</span><span>0</span><span>,</span> <span>xMax</span><span>(</span><span>props</span><span>.</span><span>data</span><span>)])</span>\n    <span>.</span><span>range</span><span>([</span><span>props</span><span>.</span><span>padding</span><span>,</span> <span>props</span><span>.</span><span>width</span> <span>-</span> <span>props</span><span>.</span><span>padding</span> <span>*</span> <span>2</span><span>]);</span>\n<span>};</span>\n\n<span>// Returns a function that \"scales\" Y coordinates from the data to fit the chart</span>\n<span>const</span> <span>yScale</span> <span>=</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>return</span> <span>d3</span><span>.</span><span>scale</span><span>.</span><span>linear</span><span>()</span>\n    <span>.</span><span>domain</span><span>([</span><span>0</span><span>,</span> <span>yMax</span><span>(</span><span>props</span><span>.</span><span>data</span><span>)])</span>\n    <span>.</span><span>range</span><span>([</span><span>props</span><span>.</span><span>height</span> <span>-</span> <span>props</span><span>.</span><span>padding</span><span>,</span> <span>props</span><span>.</span><span>padding</span><span>]);</span>\n<span>};</span>\n\n<span>export</span> <span>default</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>const</span> <span>scales</span> <span>=</span> <span>{</span> <span>xScale</span><span>:</span> <span>xScale</span><span>(</span><span>props</span><span>),</span> <span>yScale</span><span>:</span> <span>yScale</span><span>(</span><span>props</span><span>)</span> <span>};</span>\n  <span>return</span> <span>&lt;</span><span>svg</span> <span>width</span><span>=</span><span>{</span><span>props</span><span>.</span><span>width</span><span>}</span> <span>height</span><span>=</span><span>{</span><span>props</span><span>.</span><span>height</span><span>}</span><span>&gt;</span>\n    <span>&lt;</span><span>DataCircles</span> <span>{...</span><span>props</span><span>}</span> <span>{...</span><span>scales</span><span>}</span> <span>/</span><span>&gt;\n</span>  <span>&lt;</span><span>/svg</span><span>&gt;\n</span><span>}</span>\n</code></pre></div>\n<p>There’s a lot going on here, so let’s start with the stateless functional component that we’re exporting. D3 uses SVG to render data visualizations. D3 has special methods for creating SVG elements and binding data to those elements – but we’re going to let React handle that. We’re creating an SVG element with the properties passed in by the <code>Chart</code> component and which can be accessed via <code>this.props</code>. Then we’re creating a <code>DataCircles</code> component (more on that below) which will render the points for the scatter plot.</p>\n\n<p>Let’s talk about D3 scales. This is where D3 shines. Scales takes care of the messy math involved in converting your data into a format that can be displayed on a chart. If you have a data point value 189281, but your chart is only 200 pixels wide, then D3 scales converts that value to a number you can use.</p>\n\n<p><code>d3.scale.linear()</code> returns a linear scale. D3 also supports other types of scales (ordinal, logarithmic, square root, etc.), but we won’t be talking about those here. <code>domain</code> is short for an “input domain”, i.e., the range of possible input values. It takes an array of the smallest input value possible and the maximum input value. <code>range</code> on its own is the range of possible output values. So in <code>domain</code>, we’re setting the range of possible data values from our random data, and in <code>range</code> we’re telling D3 the range of our chart. <code>d3.max</code> is a D3 method for determining the maximum value of a dataset. It can take a function which D3 will use to give the max values of the X and Y coordinates.</p>\n\n<p>We use the scales to render the data circles and our axes.</p>\n\n<p>Let’s create the DataCircles component under <code>unfinished/src/components/data-circles.jsx</code></p>\n<div><pre><code><span>// unfinished/src/components/data-circles.jsx</span>\n<span>import</span> <span>React</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>const</span> <span>renderCircles</span> <span>=</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>return</span> <span>(</span><span>coords</span><span>,</span> <span>index</span><span>)</span> <span>=&gt;</span> <span>{</span>\n    <span>const</span> <span>circleProps</span> <span>=</span> <span>{</span>\n      <span>cx</span><span>:</span> <span>props</span><span>.</span><span>xScale</span><span>(</span><span>coords</span><span>[</span><span>0</span><span>]),</span>\n      <span>cy</span><span>:</span> <span>props</span><span>.</span><span>yScale</span><span>(</span><span>coords</span><span>[</span><span>1</span><span>]),</span>\n      <span>r</span><span>:</span> <span>2</span><span>,</span>\n      <span>key</span><span>:</span> <span>index</span>\n    <span>};</span>\n    <span>return</span> <span>&lt;</span><span>circle</span> <span>{...</span><span>circleProps</span><span>}</span> <span>/&gt;</span><span>;\n</span>  <span>};</span>\n<span>};</span>\n\n<span>export</span> <span>default</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>return</span> <span>&lt;</span><span>g</span><span>&gt;</span><span>{</span> <span>props</span><span>.</span><span>data</span><span>.</span><span>map</span><span>(</span><span>renderCircles</span><span>(</span><span>props</span><span>))</span> <span>}</span><span>&lt;</span><span>/g</span><span>&gt;\n</span><span>}</span>\n</code></pre></div>\n<p>In this component, we’re rendering a <code>g</code> element, the SVG equivalent to a <code>div</code>. Since we want to render a point for every set of X-Y coordinates, were must render multiple sibling elements which we wrap together in a <code>g</code> element for React to work. Inside of <code>g</code>, we’re mapping over the data and rendering a circle for each one using <code>renderCircles</code>. <code>renderCircles</code> creates an SVG <code>circle</code> element with a number of properties. Here’s where we’re setting the x and y coordinates (<code>cx</code> and <code>cy</code> respectively) with the D3 scales passed in from the scatter plot component. <code>r</code> is the radius of our circle, and key is something React requires us to do. Since we’re rendering identical sibling components, React’s diffing algorithm needs a way to keep track of them as it updates the DOM over and over. You can use any key you like, as long as it’s unique to the list. Here we’re just going to use the index of each element.</p>\n\n<p>Now, when we look at our browser, we see this:</p>\n\n<p><img src=\"https://reactjsnews.com/img/playing-with-react-and-d3/plot_points.png\" alt=\"Plot Points Image\"></p>\n\n<p>We can see our random data and randomize that data via user input. Awesome! But we’re missing a way to read this data. What we need are axes. Let’s create them now.</p>\n\n<p>Let’s open up <code>ScatterPlot.jsx</code> and add an <code>XYAxis</code> component</p>\n<div><pre><code><span>// unfinished/src/components/scatter-plot.jsx</span>\n\n<span>// ...</span>\n\n<span>import</span> <span>XYAxis</span>       <span>from</span> <span>'./x-y-axis'</span><span>;</span>\n\n<span>// ...</span>\n\n<span>export</span> <span>default</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>const</span> <span>scales</span> <span>=</span> <span>{</span> <span>xScale</span><span>:</span> <span>xScale</span><span>(</span><span>props</span><span>),</span> <span>yScale</span><span>:</span> <span>yScale</span><span>(</span><span>props</span><span>)</span> <span>};</span>\n  <span>return</span> <span>&lt;</span><span>svg</span> <span>width</span><span>=</span><span>{</span><span>props</span><span>.</span><span>width</span><span>}</span> <span>height</span><span>=</span><span>{</span><span>props</span><span>.</span><span>height</span><span>}</span><span>&gt;</span>\n    <span>&lt;</span><span>DataCircles</span> <span>{...</span><span>props</span><span>}</span> <span>{...</span><span>scales</span><span>}</span> <span>/</span><span>&gt;\n</span>    <span>&lt;</span><span>XYAxis</span> <span>{...</span><span>props</span><span>}</span> <span>{...</span><span>scales</span><span>}</span> <span>/</span><span>&gt;\n</span>  <span>&lt;</span><span>/svg</span><span>&gt;\n</span><span>}</span>\n</code></pre></div>\n<p>Now, let’s create the <code>XYAxis</code> component;</p>\n<div><pre><code><span>// unfinished/src/components/x-y-axis.jsx</span>\n<span>import</span> <span>React</span>  <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>Axis</span>   <span>from</span> <span>'./axis'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>(</span><span>props</span><span>)</span> <span>=&gt;</span> <span>{</span>\n  <span>const</span> <span>xSettings</span> <span>=</span> <span>{</span>\n    <span>translate</span><span>:</span> <span>`</span><span>translate</span><span>(</span><span>0</span><span>,</span> <span>$</span><span>{</span><span>props</span><span>.</span><span>height</span> <span>-</span> <span>props</span><span>.</span><span>padding</span><span>})</span><span>`</span><span>,</span>\n    <span>scale</span><span>:</span> <span>props</span><span>.</span><span>xScale</span><span>,</span>\n    <span>orient</span><span>:</span> <span>'bottom'</span>\n  <span>};</span>\n  <span>const</span> <span>ySettings</span> <span>=</span> <span>{</span>\n    <span>translate</span><span>:</span> <span>`</span><span>translate</span><span>(</span><span>$</span><span>{</span><span>props</span><span>.</span><span>padding</span><span>},</span> <span>0</span><span>)</span><span>`</span><span>,</span>\n    <span>scale</span><span>:</span> <span>props</span><span>.</span><span>yScale</span><span>,</span>\n    <span>orient</span><span>:</span> <span>'left'</span>\n  <span>};</span>\n  <span>return</span> <span>&lt;</span><span>g</span> <span>className</span><span>=</span><span>\"xy-axis\"</span><span>&gt;</span>\n    <span>&lt;</span><span>Axis</span> <span>{...</span><span>xSettings</span><span>}</span><span>/</span><span>&gt;\n</span>    <span>&lt;</span><span>Axis</span> <span>{...</span><span>ySettings</span><span>}</span><span>/</span><span>&gt;\n</span>  <span>&lt;</span><span>/g</span><span>&gt;\n</span><span>}</span>\n</code></pre></div>\n<p>For simplicity’s sake, we’re creating two objects which will hold the props for each of our X-Y axes. Let’s create an axis component to explain what these props do. Go ahead and create <code>axis.jsx</code></p>\n<div><pre><code><span>// unfinished/src/components/x-y-axis.jsx</span>\n<span>import</span> <span>React</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>d3</span>    <span>from</span> <span>'d3'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>class</span> <span>Axis</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span> <span>{</span>\n  <span>componentDidMount</span><span>()</span> <span>{</span>\n    <span>this</span><span>.</span><span>renderAxis</span><span>();</span>\n  <span>}</span>\n\n  <span>componentDidUpdate</span><span>()</span> <span>{</span>\n    <span>this</span><span>.</span><span>renderAxis</span><span>();</span>\n  <span>}</span>\n\n  <span>renderAxis</span><span>()</span> <span>{</span>\n    <span>var</span> <span>node</span>  <span>=</span> <span>this</span><span>.</span><span>refs</span><span>.</span><span>axis</span><span>;</span>\n    <span>var</span> <span>axis</span> <span>=</span> <span>d3</span><span>.</span><span>svg</span><span>.</span><span>axis</span><span>().</span><span>orient</span><span>(</span><span>this</span><span>.</span><span>props</span><span>.</span><span>orient</span><span>).</span><span>ticks</span><span>(</span><span>5</span><span>).</span><span>scale</span><span>(</span><span>this</span><span>.</span><span>props</span><span>.</span><span>scale</span><span>);</span>\n    <span>d3</span><span>.</span><span>select</span><span>(</span><span>node</span><span>).</span><span>call</span><span>(</span><span>axis</span><span>);</span>\n  <span>}</span>\n\n  <span>render</span><span>()</span> <span>{</span>\n    <span>return</span> <span>&lt;</span><span>g</span> <span>className</span><span>=</span><span>\"axis\"</span> <span>ref</span><span>=</span><span>\"axis\"</span> <span>transform</span><span>=</span><span>{</span><span>this</span><span>.</span><span>props</span><span>.</span><span>translate</span><span>}</span><span>&gt;&lt;</span><span>/g</span><span>&gt;\n</span>  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p>Our strategy up to this point has been to let React exclusively handle the DOM. This is a good general rule, but we should leave room for nuance. In this case, the math and work necessary in order to render an axis is quite complicated and D3 has abstracted that pretty nicely. We’re going to let D3 have access to the DOM in this case. And since we’re only going to render a maximum of 2 axis, the trade-off in terms of performance is negligible.</p>\n\n<p>We’re going to create a <code>g</code> element to hand over to D3 and its DOM manipulation. <code>transform</code> is an attribute of a <code>g</code> that defines a list of transform definitions applied to an element and an element’s children. We’re passing in a <code>translate</code> attribute that moves the <code>g</code> element to where we want it. SVG is similar to canvas in that x coordinates start at the top rather than at the bottom, so we have to account for this. Otherwise, our X-Axis would be right at the top of the chart. For the Y-Axis, we want to leave some room for rendering the tickmark values.</p>\n\n<p><code>componentDidMount()</code> is a special React lifecycle method that is called immediately after the React component is mounted on the DOM. It is only called on the initial render. When this component is now rendered on the DOM, we’re going to pass a real DOM node to D3 so it can work its magic. By adding a “ref” attribute to the <code>g</code> element, we can refer to it later via <code>this.refs</code>. Every time this component is re-rendered, we want D3 to re-draw the axis. That’s where <code>componentDidUpdate()</code> comes in. It’s called every time a component is re-rendered. You can learn more about lifecycle methods <a href=\"https://facebook.github.io/react/docs/component-specs.html\">here</a>.</p>\n\n<p>Now, if we take a look at the browser again, we can see the axis, and when we randomize the data, they update automatically to reflect the changes.</p>\n\n<p><img src=\"https://reactjsnews.com/img/playing-with-react-and-d3/complete_chart.png\" alt=\"Complete Chart Image\"></p>\n\n<h2>Conclusion</h2>\n\n<p>This is but a short introduction to React and D3. If you want to learn more check out our upcoming workshop, <a href=\"http://bit.ly/1T0PG3b\">React and D3</a>, a crash course in learning how to create data visualizations with these two in demand libraries. Reserve your spot now on Eventbrite and get 20% off admission. Learn more at the <a href=\"http://bit.ly/1T0PG3b\">Eventbrite page</a></p>","categories":[]},{"title":"How to Make Your React Apps 15x Faster","link":"https://reactjsnews.com/how-to-make-your-react-apps-10x-faster","author":"","publishedDate":"Thu, 07 Apr 2016 10:00:00 -0700","contentSnippet":"Without any modifications, React is really fast as-is. There are, however, a few things that you can do to improve performance. ...","content":"<p>Without any modifications, React is really fast as-is. There are, however, a few things that you can do to improve performance. While working at HelloSign, I discovered some quick fixes that made our apps incredibly snappy. With these simple changes, I was able to reduce render time from over 3000 milliseconds to less than 200 milliseconds.</p>\n\n\n\n<p>Without any modifications, React is really fast as-is. There are, however, a few things that you can do to improve performance. While working at HelloSign, I discovered some quick fixes that made our apps incredibly snappy. With these simple changes, I was able to reduce render time from over 3000 milliseconds to less than 200 milliseconds.</p>\n\n<p><strong>Editor’s Note:</strong></p>\n\n<p>Check out our upcoming <a href=\"http://www.reactuniversity.com/training\">React University Workshops</a>. Our next workshop, <a href=\"http://www.reactuniversity.com/react-2016\" title=\"React 2016\">React 2016</a>, will be held on April 23 at <a href=\"http://microsoftreactor.com/\">Microsoft Reactor</a> in San Francisco and will offer a deep dive into creating modern Single-Page Applications (SPA) using React, Redux, React Router, Immutable.js, and Webpack. Also, if you’re interested in learning the basics about what it takes to be a Data Visualization Engineer, check out <a href=\"http://www.reactuniversity.com/react-and-d3\">React and D3</a>.</p>\n\n<h2>Introduction</h2>\n\n<p>HelloSign is a cloud-based electronic signature tool founded in 2010. As you can imagine, HelloSign is a very JavaScript-heavy codebase. A lot of client-side behavior is necessary to create a rich signing experience. Lately, we’ve moved much of our codebase toward React. In fact, in many places we’ve broken up our codebase into several single-page applications written in React.</p>\n\n<p>Although the HelloSign team was happy with React’s performance before I initially joined the project, I quickly found some low-hanging fruit that could improve runtime speed. Here are the steps you should take to see similar improvements in your own applications.</p>\n\n<h2>Create a Baseline Performance Measurement</h2>\n\n<p>Before you begin, you should take a baseline measurement. Optimizations are meaningless if you can’t verify the results of your modifications.</p>\n\n<p>Thankfully, Chrome has excellent developer tools to help. One, little-used feature of Chrome’s DevTools is the “Timeline” tool. It allows you to record and analyze all activity in your application. You can record interactions on the page, locate potential memory leaks, measure the total time it takes to perform a task, and identify areas of potential <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/?hl=en\">jank</a>. Best of all, the results can be recorded for comparison with your final benchmark.</p>\n\n<p>There’s actually a really awesome video on Chrome’s DevTools that goes into detail about the “Timeline” feature. You can view it <a href=\"http://forwardjs.com/university/real-time-performance-audit-with-chrome-devtools\">here</a>.</p>\n\n<p>We chose to measure the time elapsed between the initial paint of our signer page to the final rendering of the entire page. The initial download of our bundles still needs some optimization, but we’re neither going to mess with nor measure this parameter. It’s fairly easy and consistent to test render time rather than trying to click areas around the page and trying to measure its performance in a repeatable way. Then, all we needed to do was to go to the signer page, open Chrome’s DevTools “Timeline” tab, and refresh the page.</p>\n\n<p>As a side note, make sure that when performing this test, the “Paint” and “Screenshots” boxes are checked so that you can see what the user sees as the page is being rendered.</p>\n\n<p>After all that, we determined that our rendering time from initial paint was a little over 3 seconds. Much too long. Luckily, there was little we had to do to make this quite a bit faster.</p>\n\n<p><img src=\"https://reactjsnews.com/img/10x-react-performance/performance-benchmark-1.png\" alt=\"Performance Benchmark 1\"></p>\n\n<h2>Set NODE_ENV to Production</h2>\n\n<p>This step is easy to get wrong, even if you are well-informed. React’s <a href=\"https://facebook.github.io/react/downloads.html#npm\">documentation</a> provides an overview, but doesn’t provide many specifics. React has great developer warnings and error checking, but these are only intended for development; if you take a look at React’s source code, you’ll see a lot of <code>if (process.env.NODE_ENV != &#39;production&#39;)</code> checks. This is running extra code that is not needed by the end user, not to mention that calling <code>process.env.NODE_ENV</code> is extremely slow. For production environments, we can remove all this unnecessary code. Just keep in mind that you don’t want to do this in development because it will remove all those helpful developer warnings.</p>\n\n<p>If you’re using <a href=\"https://webpack.github.io/\">Webpack</a>, you can use <a href=\"https://webpack.github.io/docs/list-of-plugins.html#defineplugin\">DefinePlugin</a> to replace all instances of <code>process.env.NODE_ENV</code> with <code>&#39;production&#39;</code>, and then use the <a href=\"https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\">UglifyJsPlugin</a> to remove all the dead code that no longer runs. Here’s a sample setup that you might use:</p>\n<div><pre><code><span>// webpack.config.js</span>\n  <span>...</span>\n  <span>plugins</span><span>:</span> <span>[</span>\n    <span>new</span> <span>webpack</span><span>.</span><span>DefinePlugin</span><span>({</span>\n      <span>// A common mistake is not stringifying the \"production\" string.</span>\n      <span>'process.env.NODE_ENV'</span><span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>'production'</span><span>)</span>\n    <span>}),</span>\n    <span>new</span> <span>webpack</span><span>.</span><span>optimize</span><span>.</span><span>UglifyJsPlugin</span><span>({</span>\n      <span>compress</span><span>:</span> <span>{</span>\n        <span>warnings</span><span>:</span> <span>false</span>\n      <span>}</span>\n    <span>})</span>\n  <span>]</span>\n  <span>...</span>\n</code></pre></div>\n<h2>React Constant and Inline Elements Transforms</h2>\n\n<p>React 0.14 introduced support for certain transpile time optimizations with <a href=\"https://github.com/facebook/react/blob/master/CHANGELOG.md#new-features\">Constant and Inline Element Babel Transforms</a>. <a href=\"http://babeljs.io/docs/plugins/transform-react-constant-elements/\">React Constant Elements</a> treats JSX elements as values and hoists them to a higher scope. In other words, it hoists static elements and thereby reduces calls to <code>React.createClass</code>. <a href=\"https://babeljs.io/docs/plugins/transform-react-inline-elements/\">React Inline Elements</a> converts JSX elements into the object literals that they eventually return. Again, this minimizes the runtime calls to <code>React.createClass</code>.</p>\n\n<p>The implementation is rather simple. We added our Babel configuration in our <code>package.json</code> file:</p>\n<div><pre><code><span>// package.json</span>\n  <span>...</span>\n  <span>\"babel\"</span><span>:</span> <span>{</span>\n    <span>\"env\"</span><span>:</span> <span>{</span>\n      <span>\"production\"</span><span>:</span> <span>{</span>\n        <span>\"plugins\"</span><span>:</span> <span>[</span>\n          <span>\"transform-react-constant-elements\"</span><span>,</span>\n          <span>\"transform-react-inline-elements\"</span>\n        <span>]</span>\n      <span>}</span>\n    <span>}</span>\n  <span>},</span>\n  <span>...</span>\n</code></pre></div>\n<h2>Final Measurement / Conclusion</h2>\n\n<p>Lastly, you’ll want to run the benchmark again and compare it with that saved benchmark from before these optimizations. As you can see, the total runtime profile ends 200ms after initial paint! That’s 15 times faster!</p>\n\n<p><img src=\"https://reactjsnews.com/img/10x-react-performance/performance-benchmark-2.png\" alt=\"Performance Benchmark 2\"></p>","categories":[]},{"title":"Building Redux Middleware","link":"https://reactjsnews.com/redux-middleware","author":"","publishedDate":"Sun, 13 Mar 2016 16:00:09 -0700","contentSnippet":"After writing my post a few months ago on building your own redux app, I have been asked a couple times to write a guide on ...","content":"<p>After writing my post a few months ago on <a href=\"https://reactjsnews.com/your-first-redux-app\">building your own redux app</a>, I have been asked a couple times to write a guide on creating redux middleware and how it works. This will be a quick post on how you can acheive anything with your own middleware!</p>\n\n\n\n<h2>Basic middleware</h2>\n<div><pre><code>\n<span>const</span> <span>customMiddleware</span> <span>=</span> <span>store</span> <span>=&gt;</span> <span>next</span> <span>=&gt;</span> <span>action</span> <span>=&gt;</span> <span>{</span>\n  <span>if</span><span>(</span><span>action</span><span>.</span><span>type</span> <span>!==</span> <span>'custom'</span><span>)</span> <span>return</span> <span>next</span><span>(</span><span>action</span><span>)</span>\n  <span>//do stuff!</span>\n<span>}</span>\n</code></pre></div>\n<p>Applying it:</p>\n<div><pre><code><span>import</span> <span>{</span> <span>createStore</span><span>,</span> <span>applyMiddleware</span><span>,</span> <span>}</span> <span>from</span> <span>'redux'</span>\n<span>import</span> <span>reducer</span> <span>from</span> <span>'./reducer'</span>\n<span>import</span> <span>customMiddleware</span> <span>from</span> <span>'./customMiddleware'</span>\n\n<span>const</span> <span>store</span> <span>=</span> <span>createStore</span><span>(</span>\n  <span>reducer</span><span>,</span>\n  <span>applyMiddleware</span><span>(</span><span>customMiddleware</span><span>)</span>\n<span>)</span>\n</code></pre></div>\n<p>Whaaa? <code>store =&gt; next =&gt; action =&gt;</code> I know that looks confusing. Essentially you are building a chain of functions, it will look like this when it gets called:</p>\n<div><pre><code><span>//next looks something like this:</span>\n<span>let</span> <span>dispatched</span> <span>=</span> <span>null</span>\n<span>let</span> <span>next</span> <span>=</span> <span>actionAttempt</span> <span>=&gt;</span> <span>dispatched</span> <span>=</span> <span>actionAttempt</span> \n\n<span>const</span> <span>dispatch</span> <span>=</span> <span>customMiddleware</span><span>(</span><span>store</span><span>)(</span><span>next</span><span>)</span>\n\n<span>dispatch</span><span>({</span>\n  <span>type</span><span>:</span> <span>'custom'</span><span>,</span>\n  <span>value</span><span>:</span> <span>'test'</span>\n<span>})</span>\n</code></pre></div>\n<p>All you are doing is chaining function calls and passing in the neccesary data. When I first saw this I was confused a little due to the long chain, but it made perfect sense after reading the article on <a href=\"http://redux.js.org/docs/recipes/WritingTests.html\">writing redux tests</a>. </p>\n\n<p>So now that we understand how those chained functions work, let’s explain the first line of our middleware.</p>\n<div><pre><code><span>if</span><span>(</span><span>action</span><span>.</span><span>type</span> <span>!==</span> <span>'custom'</span><span>)</span> <span>return</span> <span>next</span><span>(</span><span>action</span><span>)</span>\n</code></pre></div>\n<p>There should be some way to tell what actions should go through your middleware. In this example, we are saying if the action’s type is not <code>custom</code> call next, which will pass it to any other middleware and then to the reducer.</p>\n\n<h2>Doing Cool stuff</h2>\n\n<p>The official guide on <a href=\"http://redux.js.org/docs/advanced/Middleware.html\">redux middleware</a> covers a few examples on this, I’m going to try to explain it in a more simple way.</p>\n\n<p>Say we want an action like this:</p>\n<div><pre><code><span>dispatch</span><span>({</span>\n  <span>type</span><span>:</span> <span>'ajax'</span><span>,</span>\n  <span>url</span><span>:</span> <span>'http://api.com'</span><span>,</span>\n  <span>method</span><span>:</span> <span>'POST'</span><span>,</span>\n  <span>body</span><span>:</span> <span>state</span> <span>=&gt;</span> <span>({</span>\n    <span>title</span><span>:</span> <span>state</span><span>.</span><span>title</span>\n    <span>description</span><span>:</span> <span>state</span><span>.</span><span>description</span>\n  <span>}),</span>\n  <span>cb</span><span>:</span> <span>response</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'finished!'</span><span>,</span> <span>response</span><span>)</span>\n<span>})</span>\n\n</code></pre></div>\n<p>We want this to do a post request, and then call the <code>cb</code> function. It would look something like this:</p>\n<div><pre><code><span>import</span> <span>fetch</span> <span>from</span> <span>'isomorphic-fetch'</span>\n\n<span>const</span> <span>ajaxMiddleware</span> <span>=</span> <span>store</span> <span>=&gt;</span> <span>next</span> <span>=&gt;</span> <span>action</span> <span>=&gt;</span> <span>{</span>\n  <span>if</span><span>(</span><span>action</span><span>.</span><span>type</span> <span>!==</span> <span>'ajax'</span><span>)</span> <span>return</span> <span>next</span><span>(</span><span>action</span><span>)</span>\n\n  <span>fetch</span><span>(</span><span>action</span><span>.</span><span>url</span><span>,</span> <span>{</span>\n    <span>method</span><span>:</span> <span>action</span><span>.</span><span>method</span><span>,</span>\n    <span>body</span><span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>action</span><span>.</span><span>body</span><span>(</span><span>store</span><span>.</span><span>getState</span><span>()))</span>\n  <span>})</span>\n  <span>.</span><span>then</span><span>(</span><span>response</span> <span>=&gt;</span> <span>response</span><span>.</span><span>json</span><span>())</span>\n  <span>.</span><span>then</span><span>(</span><span>json</span> <span>=&gt;</span> <span>action</span><span>.</span><span>cb</span><span>(</span><span>json</span><span>))</span>\n<span>}</span>\n</code></pre></div>\n<p>It’s pretty simple really. You have access to every method redux offers in middleware. What if we wanted the <code>cb</code> function to have access to dispatching more actions? We could change that last line of the fetch function to this: </p>\n<div><pre><code><span>.</span><span>then</span><span>(</span><span>json</span> <span>=&gt;</span> <span>action</span><span>.</span><span>cb</span><span>(</span><span>json</span><span>,</span> <span>store</span><span>.</span><span>dispatch</span><span>))</span>\n</code></pre></div>\n<p>Now in the callback, we can do:</p>\n<div><pre><code>  <span>cb</span><span>:</span> <span>(</span><span>response</span><span>,</span> <span>dispatch</span><span>)</span> <span>=&gt;</span> <span>dispatch</span><span>(</span><span>newAction</span><span>(</span><span>response</span><span>))</span>\n\n</code></pre></div>\n<p>As you can see, middleware is very easy to write in redux. You can pass store state back to actions, and so much more. If you need any help or if I didn’t go into detail enough, feel free to leave a comment below!</p>","categories":[]},{"title":"React Router & Webpack in Production","link":"https://reactjsnews.com/webpack-in-production","author":"","publishedDate":"Sat, 12 Mar 2016 20:00:09 -0800","contentSnippet":"I&rsquo;ve been working on a pretty large react-router codebase at work. Currently it has around 50~ code splits, which as you ...","content":"<p>I’ve been working on a pretty large <a href=\"https://github.com/reactjs/react-router\">react-router</a> codebase at work. Currently it has around 50~ code splits, which as you can imagine, is a lot of routes. This is going to be a post on the things I’ve learned throughout building out my development / production config and how we are using webpack in production. </p>\n\n\n\n<h3>Initial Setup</h3>\n\n<p>Before I really dive into how my webpack config is setup and the problems I’ve found, I’ll quickly go over how this app is setup. Currently, there’s one entry point and it looks like this:</p>\n<div><pre><code><span>import</span> <span>React</span> <span>from</span> <span>'react'</span>\n<span>import</span> <span>{</span> <span>render</span> <span>}</span> <span>from</span> <span>'react-dom'</span>\n<span>import</span> <span>{</span> <span>match</span><span>,</span> <span>Router</span><span>,</span> <span>browserHistory</span> <span>}</span> <span>from</span> <span>'react-router'</span>\n<span>import</span> <span>AsyncProps</span> <span>from</span> <span>'async-props'</span>\n<span>import</span> <span>routes</span> <span>from</span> <span>'../routes/index'</span>\n<span>/* globals document, window */</span>\n\n<span>const</span> <span>{</span> <span>pathname</span><span>,</span> <span>search</span><span>,</span> <span>hash</span> <span>}</span> <span>=</span> <span>window</span><span>.</span><span>location</span>\n<span>const</span> <span>location</span> <span>=</span> <span>`</span><span>$</span><span>{</span><span>pathname</span><span>}</span><span>$</span><span>{</span><span>search</span><span>}</span><span>$</span><span>{</span><span>hash</span><span>}</span><span>`</span>\n\n<span>match</span><span>({</span> <span>routes</span><span>,</span> <span>location</span> <span>},</span> <span>()</span> <span>=&gt;</span> <span>{</span>\n  <span>render</span><span>(</span>\n    <span>&lt;</span><span>Router</span>\n      <span>render</span><span>=</span><span>{</span><span>props</span> <span>=&gt;</span> <span>&lt;</span><span>AsyncProps</span> <span>{...</span><span>props</span><span>}</span><span>/&gt;</span><span>}\n</span>      <span>routes</span><span>=</span><span>{</span><span>routes</span><span>}</span>\n      <span>history</span><span>=</span><span>{</span><span>browserHistory</span><span>}</span>\n    <span>/&gt;</span><span>,\n</span>    <span>document</span><span>.</span><span>getElementById</span><span>(</span><span>'app'</span><span>)</span>\n  <span>)</span>\n<span>})</span>\n\n</code></pre></div>\n<p>It looks like a standard react-router setup, except a couple things are different. For one, there’s way too many routes to have them all in this file, so we are importing the main route object into this file. Second, we are using <code>match</code> on the client side. Without matching first, the client side would try to render before the splits were downloaded causing an error. You can read a little more about match on the client <a href=\"https://github.com/reactjs/react-router/issues/1990#issuecomment-141350392\">here</a>. </p>\n\n<p>Next, we are using Ryan Florence’s awesome <a href=\"https://github.com/ryanflorence/async-props\">async-props</a> library for loading data into components. It allows me to load data from an api before the server renders components. It will pass the data down to the client for the client-side render, and then data will load as you navigate to new pages automatically.</p>\n\n<h3>Routes</h3>\n\n<p>Our main routes file looks like this:</p>\n<div><pre><code>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>component</span><span>:</span> <span>'div'</span><span>,</span>\n  <span>path</span><span>:</span> <span>'/'</span><span>,</span>\n  <span>indexRoute</span><span>:</span> <span>require</span><span>(</span><span>'./index'</span><span>),</span>\n  <span>childRoutes</span><span>:</span> <span>[</span>\n    <span>require</span><span>(</span><span>'./login'</span><span>),</span>\n    <span>require</span><span>(</span><span>'./account'</span><span>),</span>\n    <span>...</span>\n  <span>]</span>\n<span>}</span>\n</code></pre></div>\n<p>There’s a lot more require’s in our app of course. And these are nested pretty deep. The files referenced in the root file have more child routes, and those use \n<code>require.ensure</code> which you can read about in the webpack docs on <a href=\"https://webpack.github.io/docs/code-splitting.html\">code splitting</a>. It tells webpack to make a new bundle, and then load that bundle when require.ensure is called on the client. Here’s an example:</p>\n<div><pre><code><span>if</span><span>(</span><span>typeof</span> <span>require</span><span>.</span><span>ensure</span> <span>!==</span> <span>\"function\"</span><span>)</span> <span>require</span><span>.</span><span>ensure</span> <span>=</span> <span>function</span><span>(</span><span>d</span><span>,</span> <span>c</span><span>)</span> <span>{</span> <span>c</span><span>(</span><span>require</span><span>)</span> <span>}</span>\n\n<span>module</span><span>.</span><span>exports</span> <span>=</span> <span>{</span>\n  <span>path</span><span>:</span> <span>'account'</span><span>,</span>\n  <span>getComponent</span><span>(</span><span>location</span><span>,</span> <span>cb</span><span>)</span> <span>{</span>\n    <span>require</span><span>.</span><span>ensure</span><span>([],</span> <span>(</span><span>require</span><span>)</span> <span>=&gt;</span> <span>{</span>\n      <span>cb</span><span>(</span><span>null</span><span>,</span> <span>require</span><span>(</span><span>'../../views/master/index.jsx'</span><span>))</span>\n    <span>})</span>\n  <span>},</span>\n  <span>childRoutes</span><span>:</span> <span>[</span>\n    <span>require</span><span>(</span><span>'./settings'</span><span>),</span>\n  <span>]</span>\n<span>}</span>\n</code></pre></div>\n<p>There’s a few things going on here. First, we have a function at the top that will polyfill <code>require.ensure</code>. Why? Well, on this project we are server rendering our whole site as well, which I would rather not do, but due to the type of site we are building: we have to. The next thing is the relative require path. I’m using this awesome <a href=\"https://github.com/jshanson7/babel-plugin-resolver\">babel resolver plugin</a> along with webpack’s <a href=\"https://webpack.github.io/docs/configuration.html#resolve\">resolve paths</a> so that I can import files like this:</p>\n<div><pre><code><span>import</span> <span>Header</span> <span>from</span> <span>'../../master/header'</span>\n<span>//becomes</span>\n<span>import</span> <span>Header</span> <span>from</span> <span>'master/header'</span>\n\n</code></pre></div>\n<p>Why do I have to use a babel plugin AND webpack’s resolve feature? Once again, doing a server rendered app, the code is ran on the server and also through webpack. In this particular app, I haven’t had time to experiment with <a href=\"https://github.com/webpack/react-webpack-server-side-example\">webpacking the server</a>. Anyways, if I didn’t use the babel plugin, errors would be thrown on the server, but webpack would work fine. This is one of the common things I have ran into while building this app. </p>\n\n<p>Realizing some things need to be done slightly different on the server or client. You may still be wondering why I am referencing the component as a relative path in the above route example, and that’s because the babel plugin I’m using only works with <code>import</code> and not <code>require</code>. My route objects are the one place that I have these “nasty” looking paths.</p>\n\n<h2>Webpack</h2>\n\n<p>I was prompted to make this article after tweeting this out:</p>\n\n<blockquote><p lang=\"en\" dir=\"ltr\">webpack splits vs AggressiveMergingPlugin({minSizeReduce: 1.0}) <a href=\"https://t.co/b6kxHEqNcO\">pic.twitter.com/b6kxHEqNcO</a></p>— ReactJS News (@ReactJSNews) <a href=\"https://twitter.com/ReactJSNews/status/707970197563506688\">March 10, 2016</a></blockquote>\n\n\n\n<p>A couple people wanted a better explanation as to what’s happening here. When I was first building my production webpack config, even after using all of these plugins:</p>\n<div><pre><code><span>new</span> <span>webpack</span><span>.</span><span>optimize</span><span>.</span><span>CommonsChunkPlugin</span><span>(</span><span>'vendor'</span><span>,</span> <span>'vendor.js'</span><span>),</span>\n<span>new</span> <span>webpack</span><span>.</span><span>optimize</span><span>.</span><span>OccurenceOrderPlugin</span><span>(),</span>\n<span>new</span> <span>webpack</span><span>.</span><span>optimize</span><span>.</span><span>DedupePlugin</span><span>(),</span>\n<span>new</span> <span>webpack</span><span>.</span><span>optimize</span><span>.</span><span>UglifyJsPlugin</span><span>({</span>\n  <span>compress</span><span>:</span> <span>{</span> <span>warnings</span><span>:</span> <span>false</span> <span>},</span>\n  <span>comments</span><span>:</span> <span>false</span><span>,</span>\n  <span>sourceMap</span><span>:</span> <span>false</span><span>,</span>\n  <span>mangle</span><span>:</span> <span>true</span><span>,</span>\n  <span>minimize</span><span>:</span> <span>true</span>\n<span>}),</span>\n\n</code></pre></div>\n<p>My bundle looked like this:</p>\n\n<p><img src=\"https://reactjsnews.com/img/webpack-production/before.png\" alt=\"Webpack Output\"></p>\n\n<p>That’s pretty huge if you think about it. And I’m not talking about the amount of bundles. I’m talking about the file size. After searching everywhere for a solution to get the bundle size down further, I found webpack’s <a href=\"https://webpack.github.io/docs/list-of-plugins.html#aggressivemergingplugin\">AggressiveMergingPlugin</a>. This thing is a life saver. As you may have seen from the tweet, the output turns into this:</p>\n\n<p><img src=\"https://reactjsnews.com/img/webpack-production/after.png\" alt=\"Webpack Output\"></p>\n\n<p>Just having the main, vendor, and one other bundle brings the whole site under 1MB. I’m using the plugin to only merge files if the size reduction is more than 50%, which is the default. </p>\n\n<p>People talk about code splitting in webpack and think it’s really amazing to load the JS for the page you’re on and nothing more. It sounds great. The problem is that the file size is immensely bigger. If someone more familiar with webpack has a better idea as to why this is, I’d like a better explanation. It isn’t feasable to keep the splits instead of merging them. This site is pretty large, with a lot of routes as you can tell from the screenshots. Codesplitting without merging would cause way more waiting on the client side every time you navigate to a new page. Even if the JS was heavily cached, the first time you hit these pages it will have to load a 300kb bundle for some of them.</p>\n\n<h2>Caching</h2>\n\n<p>That takes us to caching. We are about a month away from publicly launching this site, so we haven’t setup the workflow for pushing updates through a cdn, but that will be the end result. For now, in my webpack config, my output object looks like this:</p>\n<div><pre><code><span>output</span><span>:</span> <span>{</span>\n  <span>path</span><span>:</span> <span>__dirname</span> <span>+</span> <span>'/public/assets/js/[hash]/'</span><span>,</span>\n  <span>filename</span><span>:</span> <span>'[name].js'</span><span>,</span>\n  <span>chunkFilename</span><span>:</span> <span>'[id].js'</span><span>,</span>\n  <span>publicPath</span><span>:</span> <span>'/assets/js/[hash]/'</span>\n<span>},</span>\n</code></pre></div>\n<p>This is in the production config of course. This way I can cache the files and when I update the code, the hash will change and the browser won’t be caching the old code. I pass in the hash as an env variable at runtime to that the server has the correct path to the assets folder.</p>\n\n<h2>Problems</h2>\n\n<p>There were a few big problems I came across while building out a server rendered app with dynamic routes. The first was page titles. How am I supposed to have the right title on the client and on the initial server render? Thankfully, Ryan has yet another solution. <a href=\"https://github.com/ryanflorence/react-title-component\">react-title-component</a> solves this perfectly. </p>\n\n<p>The next was, how do I hit an api, wait for the response on server render, load new data on route changes, and of course, do this at the component level. As I mentioned before, <a href=\"https://github.com/ryanflorence/async-props\">async-props</a> solves this problem too. It will give you route info so that you can make requests based on things in the url.</p>\n\n<p>The next problem is one that I haven’t fully solved. Webpack is getting really slow. It takes around 20 seconds on a maxed out macbook 15&quot; to build code in production. On the server, it takes more like a minute! If I’m in development mode, it takes around 10 seconds to make the initial build, and sometimes it lags on building the splits on code change. If anyone has insight into this I would love to hear it.</p>\n\n<p>This one goes along with the webpack one, and it is reloading the server. I haven’t tried to webpack the server but I hear doing so works great for this. I don’t think it would fix the problem with webpack being slow though, and in fact it would probably make it even slower.</p>\n\n<h2>Folder structure</h2>\n\n<p>I almost forgot to throw this one in here! I’m really happy with the structure of this project. I have a views folder that has all of the same folders and file names as the routes folder. It makes it really easy to find things. These also correspond with the URL to the page. <code>/account/settings</code> will be in <code>views/account/settings.jsx</code> and <code>routes/account/settings.js</code>. The same is true for my tests folder.</p>\n\n<h2>Conclusion</h2>\n\n<p>I hope this gave you a good glimpse at how webpack and react router work at a larger scale than you see most blog posts cover. If you have any questions or things that you would like me to talk about that I haven’t already, please leave a comment below and I will update this post! I’m sure that I forgot a few problems and tips writing this. I was thinking this would be a short post but it blew up on me!</p>","categories":[]},{"title":"React and ag-Grid - the Perfect Match","link":"https://reactjsnews.com/react-and-ag-grid","author":"","publishedDate":"Wed, 27 Jan 2016 16:05:00 -0800","contentSnippet":"What is ag-Grid\n\nag-Grid is an enterprise JavaScript data grid with zero library dependencies, including no dependency for ...","content":"<h3>What is ag-Grid</h3>\n\n<p>ag-Grid is an enterprise JavaScript data grid with zero library dependencies, including no dependency for it’s rendering. You can build an application using just JavaScript and ag-Grid alone. The ‘ag’ stands for framework AGnostic.</p>\n\n\n\n<h3>And React?</h3>\n\n<p>Now ag-Grid is providing an optional React component and React rendering. ag-Grd is fully in bed with React and treats React as a first class component - meaning if you are using React, ag-Grid is NOT using any other framework to get the job done.</p>\n\n<p>React Components follow standard DOM interaction patterns using properties, events (callbacks) and an optional API for interacting with the components. React also uses immutability to assist state management. ag-Grid uses the same principles. ag-Grid’s core interface maps directly onto what is required by React making ag-Grid and React match perfectly.</p>\n\n<p>To demonstrate, lets break down the provided\n<a href=\"https://github.com/ceolter/ag-grid-react-example\">example React and ag-Grid on Github</a>.\n(note: the example can be found running <a href=\"https://www.ag-grid.com/best-react-grid/index.php\">here</a>)</p>\n<div><pre><code>    <span>render</span><span>()</span> <span>{</span>\n        <span>return</span> <span>(</span>\n            <span>&lt;</span><span>AgGridReact</span>\n\n                <span>// listen for events with React callbacks</span>\n                <span>onRowSelected</span><span>=</span><span>{</span><span>this</span><span>.</span><span>onRowSelected</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)}</span>\n                <span>onCellClicked</span><span>=</span><span>{</span><span>this</span><span>.</span><span>onCellClicked</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)}</span>\n\n                <span>// binding to properties within React State or Props</span>\n                <span>showToolPanel</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>showToolPanel</span><span>}</span>\n                <span>quickFilterText</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>quickFilterText</span><span>}</span>\n                <span>icons</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>icons</span><span>}</span>\n\n                <span>// column definitions and row data are immutable, the grid</span>\n                <span>// will update when these lists change</span>\n                <span>columnDefs</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>columnDefs</span><span>}</span>\n                <span>rowData</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>rowData</span><span>}</span>\n\n                <span>// or provide props the old way with no binding</span>\n                <span>rowSelection</span><span>=</span><span>\"multiple\"</span>\n                <span>enableSorting</span><span>=</span><span>\"true\"</span>\n                <span>enableFilter</span><span>=</span><span>\"true\"</span>\n                <span>rowHeight</span><span>=</span><span>\"22\"</span>\n            <span>/</span><span>&gt;\n</span>        <span>);</span>\n    <span>}</span>\n</code></pre></div>\n<h3>Component</h3>\n\n<p>The AgGridReact class is the React Component that provides the interface into ag-Grid.</p>\n\n<h3>Configuration mapped to Props</h3>\n\n<p>All of the configuration for ag-Grid is done through React props, as always taking values\nfrom the parent state and props. For example, the data to display is provided as the\nrowData property:</p>\n<div><pre><code><span>&lt;</span><span>AgGridReact</span>\n    <span>...</span>\n    <span>rowData</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>rowData</span><span>}</span>\n    <span>...</span>\n</code></pre></div>\n<p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-properties/index.php\">properties documentation</a> for all the properties.</p>\n\n<p>ag-Grid, behaving like a typical React application, treats rowData as immutable. So when\nyou replace the rowData with a new array of data, the grid will pick this up\nautomatically.</p>\n\n<h3>Events mapped to Callbacks</h3>\n\n<p>The ag-Grid component generates events to inform when things happen in the grid, such\nas rows are selected, cells are clicked etc. These events map onto React callbacks\nwhen you provide the callback through one of the props.</p>\n<div><pre><code><span>&lt;</span><span>AgGridReact</span>\n    <span>...</span>\n    <span>onRowSelected</span><span>=</span><span>{</span><span>this</span><span>.</span><span>onRowSelected</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)}</span>\n    <span>onCellClicked</span><span>=</span><span>{</span><span>this</span><span>.</span><span>onCellClicked</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)}</span>\n    <span>...</span>\n</code></pre></div>\n<p>Refer to <a href=\"https://www.ag-grid.com/javascript-grid-events/index.php\">events documentation</a> for all the events.</p>\n\n<h3>API</h3>\n\n<p>The grid is a stateful component and needs to allow you to change it’s state. For example,\nthe grid keeps state as to what rows are selected, and you need to tell it to change\nthis state by telling it what rows to select. To do this, you use the grid’s API.</p>\n\n<p>When the grid initialises it fires a &#39;ready’ event that, as well as telling you the\ngrid is ready, provides you with a reference to the API.</p>\n<div><pre><code><span>&lt;</span><span>AgGridReact</span>\n    <span>...</span>\n    <span>onReady</span><span>=</span><span>{</span><span>this</span><span>.</span><span>onReady</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)}</span>\n    <span>...</span>\n\n<span>onReady</span><span>(</span><span>params</span><span>)</span> <span>{</span>\n    <span>//store the api</span>\n    <span>this</span><span>.</span><span>gridApi</span> <span>=</span> <span>params</span><span>.</span><span>api</span><span>;</span>\n<span>}</span>\n\n    <span>// then sometime  later</span>\n    <span>this</span><span>.</span><span>gridApi</span><span>.</span><span>selectAll</span><span>();</span>\n</code></pre></div>\n<p>Refer to <a href=\"https://www.ag-grid.com/angular-grid-api/index.php\">API documentation</a> for the full API.</p>\n\n<h3>In Grid Rendering</h3>\n\n<p>And then ag-Grid then goes further, it embraces React for rendering. That means you can \nuse React for custom cell rendering inside the grid. You provide ag-Grid with the React component\nand it knows what to do with to seamlessly integrate.</p>\n\n<p>The following shows the skills cellRenderer from the sample application. As you can see,\nit’s pure React, short, to the point, compact, nice!</p>\n<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>SkillsCellRenderer</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span> <span>{</span>\n\n    <span>render</span><span>()</span> <span>{</span>\n        <span>var</span> <span>skills</span> <span>=</span> <span>[];</span>\n        <span>var</span> <span>rowData</span> <span>=</span> <span>this</span><span>.</span><span>props</span><span>.</span><span>params</span><span>.</span><span>data</span><span>;</span>\n        <span>RefData</span><span>.</span><span>IT_SKILLS</span><span>.</span><span>forEach</span><span>(</span> <span>(</span><span>skill</span><span>)</span> <span>=&gt;</span> <span>{</span>\n            <span>if</span> <span>(</span><span>rowData</span><span>.</span><span>skills</span><span>[</span><span>skill</span><span>])</span> <span>{</span>\n                <span>skills</span><span>.</span><span>push</span><span>(</span><span>&lt;</span><span>img</span> <span>key</span><span>=</span><span>{</span><span>skill</span><span>}</span> <span>src</span><span>=</span><span>{</span><span>'images/skills/'</span> <span>+</span> <span>skill</span> <span>+</span> <span>'.png'</span><span>}</span> <span>width</span><span>=</span><span>{</span><span>16</span><span>}</span> <span>title</span><span>=</span><span>{</span><span>skill</span><span>}</span> <span>/&gt;</span><span>)</span><span>;\n</span>            <span>}</span>\n        <span>});</span>\n\n        <span>return</span> <span>&lt;</span><span>span</span><span>&gt;</span><span>{</span><span>skills</span><span>}</span><span>&lt;</span><span>/span&gt;</span><span>;\n</span>    <span>}</span>\n\n<span>}</span>\n</code></pre></div>\n<h3>Summary</h3>\n\n<p>ag-Grid and React match up perfectly, giving you an enterprise data grid for use inside you React application.</p>\n\n<p>To find out more about ag-Grid, visit <a href=\"http://www.ag-grid.com/\">www.ag-grid.com</a>.</p>","categories":[]},{"title":"Bring your animations to life with physics","link":"https://reactjsnews.com/bring-your-animations-to-life-with-physics","author":"","publishedDate":"Wed, 13 Jan 2016 12:00:09 -0800","contentSnippet":"Improve your user&rsquo;s experience with animations. Learn about CSS and Javascript animations and when to use ...","content":"<p>Improve your user’s experience with animations. Learn about CSS and Javascript animations and when to use them.</p>\n\n\n\n<h4>Getting started with animations</h4>\n\n<p>To animate is to transition the user interface from one display to another. Animation enhances user experience, providing feeback to user actions and making screens that haven’t been introduced before easier to understand.</p>\n\n<p>An example can be seen with this <a href=\"http://www.material-ui.com/#/components/date-picker\">React Material UI datepicker</a>. \nThe animations respond to user input and inform the user with transitions that show they are moving back or forward when they change month or select a date.</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336337/ede568fe-bb68-11e5-8750-7cf50c46a7c7.gif\" alt=\"materialpicker\"></p>\n\n<p>This post will compare using CSS transitions based on time against using spring phsyics to animate transitions. We will use the example of transitioning a box from left to right (You could imagine this being a month view in a calendar that we slide in and out of view).</p>\n\n\n\n\n\n<h4>Example with no Animation</h4>\n\n<p>We will build on this example which doesn’t have any animation. Without animation the transition is jarring and doesn’t show the user where the item is moving from and to. Look at the code in the Babel tab and see that we use transform: translateX rather than setting the left position because left, top, right, bottom are positioned by the CPU and cause a repaint while items using translate are positioned by the GPU and therefore more performant.</p>\n\n<pre> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/GoEKLN\">Check out this Pen!</a> </pre>\n\n<h4>Using timed CSS animations</h4>\n\n<p>A CSS transition can be added to the properties of an element with the CSS transition property. Per the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/transition\">Mozilla docs for transition</a>, we can pass the duration we want the transition to take and a cubic bezier timing function. In this case I have set the duration to 0.5s and used the default timing function of ease. </p>\n\n<pre> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/xZrZJp\">Check out this Pen!</a> </pre>\n\n<h4>Cubic Bezier</h4>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12335516/79b72d54-bb64-11e5-8fbe-b2a9e6715ea9.png\" alt=\"Cubic Bezier Curve\"></p>\n\n<p>A cubic bezier curve is a timing function that starts at position 0 and time 0 and ends at 1,1. It accepts four arguments (x1, y1, x2, y2), which are the two control points to determine the shape of the curve. As you can see above, the ease function accelerates at the start and then decelerates at the middle, causing the animation to ‘ease’ as it finishes. The ease function is just shorthand for cubic-bezier(0.25,0.1,0.25,1). If you want to prove this, re-run this example after changing line 18 to: </p>\n<div><pre><code>  <span>transition</span><span>:</span> <span>'0.5s cubic-bezier(0.25, 0.1, 0.25, 1)'</span>\n</code></pre></div>\n<p>The <a href=\"http://cubic-bezier.com/\">cubic bezier site by Lea Verou</a> is a great resource for experimenting with different timing functions. Below I have compared a linear function against the ease function. </p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336020/f5c3568c-bb66-11e5-84e8-762a41ba4d58.gif\" alt=\"cubicbeziercom\"></p>\n\n<p>Chrome dev tools allow you to experiment with different curves and also control the speed of animations as seen below.</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336063/4134261e-bb67-11e5-8bbd-4981028659a7.gif\" alt=\"chromebez\"></p>\n\n<h4>Why you should use spring physics in animations</h4>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12336758/ff68ac10-bb6a-11e5-9560-15737d665b4d.gif\" alt=\"damped_spring\"></p>\n\n<p>As cubic bezier functions only give you two points of control, it doesn’t give the developer enough control to model real life movement. However, by controlling the animation with Javascript, we have full control and can use Hooke’s law which expresses how springs extends and contract. Spring animation is already very popular and can be used to provide lively animations in iOS core animation, and in Facebook’s Pop and Rebound libraries. </p>\n\n<p>Look at the cubic bezier animations on the left taken from <a href=\"http://framerjs.com/learn/basics/animation/\">framerjs</a>, compared with the spring animation on the right. The spring animation has a bounce effect - which is not possible with a cubic bezier function. You could acheive this animation with CSS by using key frames, but you would have to hard code the key frame values and duration of the animation.</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12362208/f52638fa-bc26-11e5-895e-59c0ad611928.gif\" alt=\"framer\"></p>\n\n<p>React Motion implements a terse API for you to use spring animation which can be used on the web and with React Native. You have the option to specify the start value (in this case, 0) and the spring physics values you want to animate to. React Motion runs in a request animation frame. The Motion component will keep calling your function to render your animated component with a style object that has the calculated values for each frame. In the example below I have destructured the x property and rendered it in the component.</p>\n\n<pre> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/EPwWOg\">Check out this Pen!</a> </pre>\n\n<h5>Continuous fluid interfaces</h5>\n\n<p>In the excellent talk on the <a href=\"https://www.youtube.com/watch?v=1tavDv5hXpo\">state animation in React</a>, Cheng Lou, the creator, highlighted a quote from a former UIKit engineer at Apple.</p>\n\n<blockquote lang=\"en-gb\"><p lang=\"en\" dir=\"ltr\">Animation APIs parameterized by eg duration and curve are fundamentally opposed to continuous, fluid interactivity.</p>— Andy Matuschak (@andy_matuschak) <a href=\"https://twitter.com/andy_matuschak/status/566736015188963328\">February 14, 2015</a></blockquote>\n\n<p>In the talk, Cheng used an example of animating an opening menu to illustrate this point - “For example, if you have a menu deploy animation that takes 500 milliseconds, and half-way the user clicks on something, and you toggle it back to its initial hidden state, why should this way back also be 500 milliseconds? And also, what should the curve be: ease-in, linear? It is not very clear”.</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/2054503/12363885/3f87eebc-bc30-11e5-9ceb-40e2ad34700f.gif\" alt=\"calendardemosmall\"></p>\n\n<p>The need for a fluid interface is what made me look into react-motion. We are currently building a calendar at <a href=\"http://fergusapp.com/\">Fergus</a> which requires the ability to respond to drag events and clicks moving the calendar in different directions and by different distances. When we prototyped this with CSS transitions, it was janky and felt slow.</p>\n\n<p>Compare how fluid the spring motion animation is against the CSS animations by clicking the &#39;Run animation’ button multiple times in quick succession.</p>\n\n<pre> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/dGVvEJ\">Check out this Pen!</a> </pre>\n\n<h4>Configuring React Motion</h4>\n\n<p>The React Motion spring takes two arguments: stiffness and damping (which defaut to 120 and 17, respectively). Four <a href=\"https://github.com/chenglou/react-motion/blob/master/src/presets.js\">presets</a> are provided: noWobble, gentle, wobbly, and stiff. By adjusting the stiffness and damping below, you can watch how these factors change the animation.</p>\n\n<pre> <code> </code> <a href=\"http://codepen.io/TomClarkson/pen/OMxmQL\">Check out this Pen!</a> </pre>\n\n<h4>When to use CSS Animations</h4>\n\n<p>As Cheng said in his talk, CSS animations are better for animations that you don’t want to stop or adjust after they are triggered - such as Twitter’s exploding heart animation. This is because CSS animations are more performant. React Motion does incur the cost of having your app re-rendered every animation frame which could be a problem if your application is not performant.</p>","categories":[]},{"title":"Is There a React Equivalent for Angular’s ng-repeat?","link":"https://reactjsnews.com/NgRepeat-Equivalent-in-React","author":"","publishedDate":"Sun, 03 Jan 2016 15:16:00 -0800","contentSnippet":"If you&rsquo;re familiar with AngularJS you already understand many of the principles necessary to get started with React. In ...","content":"<p>If you’re familiar with AngularJS you already understand many of the principles necessary to get started with React. In this post, I’ll demonstrate how to write the equivalent of an ngRepeat inside a React component.</p>\n\n\n\n<p>This post originally appeared on my <a href=\"http://angulartoreact.com/ng-repeat-react-equivalent\">Angular to React</a> site where you’ll find more resources like this to help Angular Developers get up to speed quickly on React.</p>\n\n<h1>Is There a React Equivalent for Angular’s ng-repeat?</h1>\n\n<h4>Yes. React doesn’t use a proprietary construct to iterate over a collection of data. Instead, it relies on native Javascript iterators to generate repeating blocks of UI. Keep reading below for code samples and further explanation.</h4>\n\n<p>If you’ve been developing Angular applications for any amount of time, you’ve likely used the <code>ng-repeat</code> directive. Generating repeating blocks of UI from a data structure is a cornerstone of web development regardless of language or framework.</p>\n\n<p>The AngularJS team wrapped up a really convenient and powerful piece of iterative magic in the <code>ng-repeat</code> directive. With very little code, you can create dynamic lists that stay in sync with a collection of data. Just so we’re on the same page, here’s what the Angular code looks like:</p>\n\n<h5>AngularJS Code Sample for <code>ng-repeat</code></h5>\n\n<p>Assume you have an array like this:</p>\n<div><pre><code><span>var</span> <span>items</span> <span>=</span> <span>[</span>\n  <span>{</span> <span>name</span><span>:</span> <span>\"Matthew\"</span><span>,</span> <span>link</span><span>:</span> <span>\"https://bible.com/1/mat.1\"</span> <span>},</span>\n  <span>{</span> <span>name</span><span>:</span> <span>\"Mark\"</span><span>,</span> <span>link</span><span>:</span> <span>\"https://bible.com/1/mrk.1\"</span> <span>},</span>\n  <span>{</span> <span>name</span><span>:</span> <span>\"Luke\"</span><span>,</span> <span>link</span><span>:</span> <span>\"https://bible.com/1/luk.1\"</span> <span>},</span>\n  <span>{</span> <span>name</span><span>:</span> <span>\"John\"</span><span>,</span> <span>link</span><span>:</span> <span>\"https://bible.com/1/jhn.1\"</span> <span>}</span>\n<span>];</span>\n</code></pre></div>\n<p>In Angular 1.x, to create a <code>ul</code> with an <code>li</code> for each item in the array you would put the following code in your controller:</p>\n<div><pre><code><span>.</span><span>controller</span><span>(</span><span>\"NgRepeatDemoCtrl\"</span><span>,</span> <span>function</span><span>(</span><span>$scope</span><span>)</span> <span>{</span>\n  <span>$scope</span><span>.</span><span>items</span> <span>=</span> <span>items</span><span>;</span>\n<span>});</span>\n</code></pre></div>\n<p>Then, in your view, you could use the <code>ng-repeat</code> directive like this:</p>\n<div><pre><code><span>&lt;ul&gt;</span>\n  <span>&lt;li</span> <span>ng-repeat=</span><span>\"item in items\"</span><span>&gt;</span>\n    <span>&lt;a</span> <span>ng-href=</span><span>\"\"</span><span>&gt;&lt;/a&gt;</span>\n  <span>&lt;/li&gt;</span>\n<span>&lt;/ul&gt;</span>\n</code></pre></div>\n<h5>React Alternative to <code>ng-repeat</code></h5>\n\n<p>To perform the same task in React you just need to think natively. Under the hood <code>ng-repeat</code> is just using a native Javascript iterator. You can use the same sort of native iterator directly in React. For just example, I’ll use <code>Array.map</code>. Here’s an example:</p>\n<div><pre><code><span>var</span> <span>RepeatModule</span> <span>=</span> <span>React</span><span>.</span><span>createClass</span><span>({</span>\n  <span>getDefaultProps</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>items</span><span>:</span> <span>[]</span> <span>}</span>\n  <span>},</span>\n  <span>render</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n\n    <span>var</span> <span>listItems</span> <span>=</span> <span>this</span><span>.</span><span>props</span><span>.</span><span>items</span><span>.</span><span>map</span><span>(</span><span>function</span><span>(</span><span>item</span><span>)</span> <span>{</span>\n      <span>return</span> <span>(</span>\n        <span>&lt;</span><span>li</span> <span>key</span><span>=</span><span>\"{item.name}\"</span><span>&gt;</span>\n          <span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>\"{item.link}\"</span><span>&gt;</span><span>{</span><span>item</span><span>.</span><span>name</span><span>}</span><span>&lt;</span><span>/a</span><span>&gt;\n</span>        <span>&lt;</span><span>/li</span><span>&gt;\n</span>      <span>);</span>\n    <span>});</span>\n\n    <span>return</span> <span>(</span>\n        <span>&lt;</span><span>ul</span><span>&gt;</span>\n          <span>{</span><span>listItems</span><span>}</span>\n        <span>&lt;</span><span>/ul</span><span>&gt;\n</span>    <span>);</span>\n  <span>}</span>\n<span>});</span>\n</code></pre></div>\n<p>In this example, <code>Array.map</code> iterates through every item contained in <code>items</code> and executes a function that returns a DOM element. <em>(Technically, it’s a virtual DOM element, but that’s a different discussion.)</em>   Every <code>li</code> that is returned from inside of the map function gets added to a new array and finally returned as the value of the <code>Array.map()</code> function. The result of that function is stored in the <code>listItems</code> variable. When React calls the render method on our component, we generate an array of list items and then insert them into our <code>ul</code> using a single pair of enclosing curly braces.</p>\n\n<h5>Try It Out Yourself Using <a href=\"http://jsfiddle.net/zqef96hu/2/\">This JSFiddle</a></h5>","categories":[]},{"title":"An Angular Developer's Guide to Their First React Component","link":"https://reactjsnews.com/an-angular-developers-first-react-app","author":"","publishedDate":"Wed, 30 Dec 2015 09:45:00 -0800","contentSnippet":"I&rsquo;ve been using Angular in my web apps for the last four years, but I recently became interested in React so I started ...","content":"<p>I’ve been using Angular in my web apps for the last four years, but I recently became interested in React so I started the learning process. As usual, I dove in blindly, fumbled around with various tutorials until I felt comfortable enough to build something useful. With a few React apps under my belt now, I want to share what I’ve learned with other Angular developers who may be trying out React for the first time. In this post, I’ll start from scratch assuming you know nothing about React. I will try to help correlate Angular concepts with their React counterparts so you can start to build a mental model based on something you already know.</p>\n\n\n\n<p>This post originally appeared on my <a href=\"http://angulartoreact.com/\">Angular to React</a> site where you’ll find code samples and resources to help get Angular Developers up to speed quickly on React.</p>\n\n<p>I’ve been using Angular in my web apps for the last four years, but I recently became interested in React so I started the learning process. As usual, I dove in blindly, fumbled around with various tutorials until I felt comfortable enough to build something useful. With a few React apps under my belt now, I want to share what I’ve learned with other Angular developers who may be trying out React for the first time. In this post, I’ll start from scratch assuming you know nothing about React. I will try to help correlate Angular concepts with their React counterparts so you can start to build a mental model based on something you already know.</p>\n\n<h2>Getting Started</h2>\n\n<p>As I mentioned, my primary goal with this post is to help you build a mental model of a typical React component based on how it correlates with AngularJS. I won’t dive into setting up your dev environment or installing dependencies. Instead, I’ve created a JSFiddle that you can use to walk through this entire guide. You probably want to open this <a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">JSFiddle</a> in a new tab.</p>\n\n<h2>Disclaimer</h2>\n\n<p>Very little about React and Angular will be a exact correlation. There are fundamental differences between the two frameworks all the way down to the conceptual level. So, when I express a correlation in this guide between the two frameworks, it is for the sole purpose of helping you build that mental model so that you can start to grasp the basic concepts of React.</p>\n\n<p>While this post may seem to indicate otherwise, don’t think of Angular and React as an either/or proposition. It is totally feasible to put React components inside of Angular views or to put Angular directives inside of react components. There are times when using one or the other makes more sense, but each should be considered on a case-by-case basis.</p>\n\n<h2>Goodbye Directives. Hello Components.</h2>\n\n<p>You’ve likely built at least one custom directive in Angular. It’s a convenient way to encapsulate and isolate specific functionality in a way that is testable and resuable. If you set the <code>restrict</code> property on the directive to <code>E</code> for element, then you can include that directive in your view template as a custom tag like this <code>&lt;MyDirective /&gt;</code>.</p>\n\n<p>You can think of a React component in the same way. You define your component as a class and then you are able to include it in your JSX code by name using a tag like this <code>&lt;MyComponent /&gt;</code>. What the heck is JSX? For now, just think of it as an easy way to include HTML-like markup directly inside your native Javascript class. </p>\n\n<p><em>Also, just in case you start to get confused, let me clarify something. A React component has nothing to do with web components and the shadow DOM. That’s a totally separate concept.</em></p>\n\n<p>Let’s see some actual code. Here’s the code for a simple React component:</p>\n<div><pre><code><span>var</span> <span>DemoComponent</span> <span>=</span> <span>React</span><span>.</span><span>createClass</span><span>({</span>\n  <span>render</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>&lt;</span><span>div</span><span>&gt;</span>\n        <span>I</span> <span>am</span> <span>a</span> <span>component</span><span>.</span>\n      <span>&lt;</span><span>/div&gt;</span><span> \n</span>    <span>);</span> \n  <span>}</span> \n<span>});</span>\n</code></pre></div>\n<p><a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">Don’t forget to follow along in the JSFiddle</a></p>\n\n<p>Let’s break down the code. The React module has a <code>createClass</code> method that takes an object as its only parameter. We define only one key to start with: <code>render</code>. The value of <code>render</code> is a function that returns a virtual DOM element. One of the keys to React’s performance is its virtual DOM abstraction. Essentially, it calculates the difference between the existing DOM and the new elements to be rendered. Then, it <em>only</em> modifies the necessary elements and attributes.</p>\n\n<p>Inside the render function, you may have noticed that I included HTML markup. That’s JSX. It won’t pass validation as legal Javascript. Instead, it requires the <a href=\"https://babeljs.io/\">Babel transpiler</a>. For this demo, I have taken care of the transpiling inside the JSFiddle so you don’t have to worry about it. </p>\n\n<p>After being hammered with the MVC paradigm, it may seem odd to include HTML inside your native Javascript class. I agree. This threw me for a loop when I first started learning React. I adamantly refused to use JSX and the Babel transpiler. I was wrong. My advice to you: embrace JSX and Babel transpilation. Aside from the benefits of readability and composability, Babel transpilation offers a treasure trove of features and forward-compatibility with ES6. </p>\n\n<h4>But what about separation of concerns? This just feels wrong.</h4>\n\n<p>I totally understand your trepidation, but which concerns were we actually separating with MVC? In Angular, you had to remember to inject the <code>$scope</code> service into your controller. Then, you had to assign your models to <code>$scope</code> variables so that you could access them in your view. We’re exerting extra effort to pass information from our controller to our view. In MVC, the view can do very little without help from the controller. The intent behind <em>Separation of Concerns</em>, in my opinion, is to encourage the use of small single-purpose components. Including your UI markup inside your component class using JSX doesn’t violate this principle, but it <em>does</em> make things a little easier for the developer.</p>\n\n<p>In React, the paradigm is slightly different from Angular. Each React component knows how to handle itself, but <em>only</em> itself. It knows how to take input and render its own UI. Putting the rendering code inside of the component class really makes sense. If you don’t agree immediately, I get it. But, just try it out on something tangible (not a demo or tutorial) and see how you feel about it. If you still don’t like it, JSX is not a requirement. You can build your React components without it.</p>\n\n<p>Time to get on with this walk through.</p>\n\n<h2>Let’s Set Some Attributes… er… eh… Properties</h2>\n\n<p>Once you get over the weird (but strangely familiar) JSX syntax, it is pretty easy to see the correlation between a React component and an Angular directive. The next logical step is to get some data into our new component. In Angular, I often create directives with isloate scopes. To pass values into the directive you use attributes. In React, the concept is similar, but the syntax is a little different. Take a look at some code:</p>\n<div><pre><code><span>var</span> <span>Title</span> <span>=</span> <span>React</span><span>.</span><span>createClass</span><span>({</span>\n  <span>render</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>&lt;</span><span>h1</span><span>&gt;</span><span>{</span><span>this</span><span>.</span><span>props</span><span>.</span><span>title</span><span>}</span><span>&lt;</span><span>/h1&gt;</span><span> \n</span>    <span>);</span> \n  <span>}</span> \n<span>});</span>\n</code></pre></div>\n<p><a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">Don’t forget to follow along in the JSFiddle</a></p>\n\n<p>That is it for the component definition. React components have a <code>props</code> property with key/value pairs for all attributes passed to them through attributes in JSX. To use this component, we just need to supply the value of the <code>title</code> property like this:</p>\n<div><pre><code><span>&lt;</span><span>Title</span> <span>title</span><span>=</span><span>{</span><span>myTitle</span><span>}</span> <span>/</span><span>&gt;\n</span></code></pre></div>\n<p>Notice that in JSX, you don’t need any single or double quotations surrounding your property value. You just enclose the <code>myTitle</code> variable with a single set of curly braces. Hopefully, this feels a lot like the double curly brace syntax for binding to <code>$scope</code> variables in Angular. Just remember, no quotes.</p>\n\n<h4>Stateless Immutable Glory</h4>\n\n<p>A key difference between React and Angular at this level is the immutability of properties. A React component should never change the value of <code>this.props</code> or any of its keys. Angular doesn’t have this same restriction in place for directives with isolate scopes. Instead, in Angular you have dynamic data binding that keeps watching the values of <code>$scope</code> variables and rendering the changes in your directive in real time.</p>\n\n<p>In React, whenever possible, you should build stateless components with immutable properties. That means that, given the same set of properties and input, the component should:</p>\n\n<ol>\n<li>Never change the value of those properties. </li>\n<li>Render the exact same UI given the same property values.</li>\n</ol>\n\n<p>When done properly, React will automatically call the <code>render</code> function anytime one of those properties is changed by something outside of the component, usually the owner of the component. These types of components are easier to test and have less opportunity to introduce bugs into your code. They are also much easier to map mentally because you can automatically assume that data is only flowing one way… into the component.</p>\n\n<p>However, there are times when immutable properties just aren’t enough to get the job done. When this happens, there is <code>state</code>. If your component needs to keep track of something internally, that may be a good use case for <code>state</code>. A good example might be a menu that toggles between open and closed on the click of a button or in response to an event. In this case, the component can create a key in <code>this.state</code> that keeps track of the component’s state. These stateful components should be used only when necessary. Here’s a sample component:</p>\n<div><pre><code><span>var</span> <span>OnOffButton</span> <span>=</span> <span>React</span><span>.</span><span>createClass</span><span>({</span>\n  <span>getInitialState</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>value</span><span>:</span> <span>true</span> <span>}</span>\n  <span>},</span>\n  <span>handleClick</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>this</span><span>.</span><span>setState</span><span>({</span> <span>value</span><span>:</span> <span>!</span><span>this</span><span>.</span><span>state</span><span>.</span><span>value</span> <span>});</span>\n  <span>},</span>\n  <span>render</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>&lt;</span><span>button</span> <span>onClick</span><span>=</span><span>{</span><span>this</span><span>.</span><span>handleClick</span><span>}</span><span>&gt;</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>value</span> <span>?</span> <span>\"On\"</span> <span>:</span> <span>\"Off\"</span><span>}</span><span>&lt;</span><span>/button</span><span>&gt;\n</span>    <span>);</span>\n  <span>}</span>\n<span>});</span>\n</code></pre></div>\n<p><a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">Don’t forget to follow along in the JSFiddle</a></p>\n\n<p>Breaking it down, you’ll notice a few new things. First, the <code>getInitialState</code> function. This is part of the React component lifecycle and it gets called once before the component is mounted. It should return an object.</p>\n\n<p>Next, you see the internal state object being referenced using <code>this.state</code>. The object that gets returned from <code>getInitialState</code> becomes the values of <code>this.state</code> inside the React component.</p>\n\n<p>Then, you probably noticed the call to <code>this.setState</code>. A React component’s internal state should only be modified by calls to either <code>this.setState</code> or <code>this.replaceState</code>. With <code>setState</code>, you pass an object in as the first argument and that object is merged into <code>this.state</code>. With <code>replaceState</code>, it also takes an object as its first argument, but instead of a shallow merge, it completely replaces <code>this.state</code> with the new object. Both of these methods will trigger a UI update.</p>\n\n<p>You probably noticed that I also splipped in an onClick event handler. Let’s walk through that next.</p>\n\n<h2>Wait. What about ngClick?</h2>\n\n<p>In the previous example, you probably noticed the use of <code>onClick</code>. This closely correlates to the <code>ng-click</code> you’ve grown accustomed to. Notice the camel casing on the event name. This is important because <code>onclick</code> will not work. </p>\n\n<p>React has a synthetic event system that encloses the native browser events inside a cross-browser wrapper to ensure that events work the same in all browsers. For a full list of supported events see <a href=\"\">https://facebook.github.io/react/docs/events.html</a>.</p>\n\n<p>To wire up an event handle, just pass the name of a function as the value of the event attribute, like this:</p>\n<div><pre><code><span>&lt;</span><span>button</span> <span>onClick</span><span>=</span><span>{</span><span>this</span><span>.</span><span>handleClick</span><span>}</span><span>&gt;</span><span>Click</span> <span>Me</span><span>&lt;</span><span>/button</span><span>&gt;\n</span></code></pre></div>\n<p>The function needs to be available in the local scope of the React component as referenced by <code>this</code>.</p>\n\n<h2>Putting It All Together</h2>\n\n<p>As you start combining components together to build an actual application, you’ll discover that some components need a way state to contain page-level data that is shared among many componets. For example, you might be rendering a blog post. One component needs to display the blog title while another needs to render the body. It wasn’t obvious to me, at first, how to put together multiple components to create an application. If you’ve been following along with the <a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">accompanying JSFiddle</a>, you may already have a clue how to do this. First, let’s look at some code:</p>\n<div><pre><code><span>var</span> <span>App</span> <span>=</span> <span>React</span><span>.</span><span>createClass</span><span>({</span>\n  <span>getInitialState</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>{</span><span>title</span><span>:</span> <span>this</span><span>.</span><span>props</span><span>.</span><span>title</span><span>}</span>\n  <span>},</span>\n  <span>handleClick</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>this</span><span>.</span><span>setState</span><span>({</span><span>title</span><span>:</span> <span>this</span><span>.</span><span>state</span><span>.</span><span>title</span> <span>+</span> <span>\".\"</span><span>});</span>   \n  <span>},</span>\n  <span>render</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>&lt;</span><span>div</span><span>&gt;</span>\n        <span>&lt;</span><span>Title</span> <span>title</span><span>=</span><span>{</span><span>this</span><span>.</span><span>state</span><span>.</span><span>title</span><span>}</span> <span>/</span><span>&gt;\n</span>        <span>&lt;</span><span>DemoComponent</span> <span>/&gt;</span>\n        <span>&lt;</span><span>br</span> <span>/&gt;</span>\n        <span>&lt;</span><span>OnOffButton</span> <span>/&gt;</span>\n        <span>&lt;</span><span>br</span> <span>/&gt;</span>\n        <span>&lt;</span><span>button</span> <span>onClick</span><span>=</span><span>{</span><span>this</span><span>.</span><span>handleClick</span><span>}</span><span>&gt;</span><span>Change</span> <span>Title</span><span>&lt;</span><span>/button</span><span>&gt;\n</span>      <span>&lt;</span><span>/div</span><span>&gt;\n</span>    <span>);</span>\n  <span>}</span>\n<span>});</span>\n</code></pre></div>\n<p><a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">Don’t forget to follow along in the JSFiddle</a></p>\n\n<p>So, this is an all-encompassing component that takes the <code>&lt;DemoComponent&gt;</code>, <code>&lt;Title&gt;</code>, and <code>&lt;OnOffButton&gt;</code> components that we’ve created through the course of this walk-through and puts them all together into a single <code>&lt;App&gt;</code> component. JSX allows us to compose components using other components as tags. So, when we define the <code>Title</code> class, we can use that new component inside another component using the <code>&lt;Title&gt;</code> tag. </p>\n\n<p>Ideally, as you build your React apps, you will have a few top-level components that handle fetching data, setting initial state and properties, and listening for events. These are known as controller-views. These top-level components may contain many components. You just pass data down to these <em>owned</em> components through immutable properties, keeping most of your components stateless. A controller-view could represent an entire <em>page</em> or a major section of a page inside a larger application. For my <a href=\"http://angulartoreact.com\">Angular to React site</a>, I have a single component for every URL even though each of those top-level components are composed of several smaller components. </p>\n\n<h2>Where Do I Go From Here?</h2>\n\n<p>In larger Angular apps, I always used <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router\">ui-router</a>. This allows me to monitor the browser for URL changes and render the appropriate Angular view. In React, the correlating module you’re looking for is probably <a href=\"https://github.com/rackt/react-router\">react-router</a>. I’ve used it in a couple of apps. It allows you to map URLs to top-level React components. It is simple to implement, but it supports some advanced routing scenarios like default routes, index routes and nested routes.</p>\n\n<p>Feel free to <a href=\"http://jsfiddle.net/michaelishere/52oxac3k/\">fork my JSFiddle</a> and experiment with it. You can also check out my <a href=\"http://angulartoreact.com\">Angular to React site</a> for more React alternatives to common Angular features.</p>\n\n<p>Here’s a few other posts I’ve written that might help you get started:</p>\n\n<ul>\n<li><a href=\"http://angulartoreact.com/ng-click-react-equivalent\">What’s the React Equivalent of Angular’s ng-click?</a></li>\n<li><a href=\"http://angulartoreact.com/ng-repeat-react-equivalent\">Is There a React Equivalent for Angular’s ng-repeat?</a></li>\n<li><a href=\"http://angulartoreact.com/ng-style-react-equivalent\">What’s the React Equivalent of Angular’s ng-style?</a></li>\n<li><a href=\"http://angulartoreact.com/ng-if-react-equivalent\">Angular`s ng-if Equivalent In a React Component</a></li>\n</ul>","categories":[]},{"title":"The Pain and the Joy of creating isomorphic apps in ReactJS","link":"https://reactjsnews.com/isomorphic-react-in-real-life","author":"","publishedDate":"Fri, 11 Dec 2015 16:30:00 -0800","contentSnippet":"This post is not a tutorial. There are enough of them on the Internet. It is always more interesting to look at a real ...","content":"<p>This post is not a tutorial. There are enough of them on the Internet. It is always more interesting to look at a real production app. A lot of tutorials and boilerplates show how to write isomorphic ReactJS applications, but they do not cover a lot of real-life problems we’ve faced in production (styling, data-fetching, vendor-prefixes, configutation etc). So we decided to share our experience at github and develop the app in a <a href=\"https://github.com/webbylab/itsquiz-wall\">public repo</a>. The post describes all the issues and howto to deal with them.</p>\n\n\n\n<p>Ths post originally appeared on the <a href=\"http://blog.koorchik.com/isomorphic-react/\">koorchik’s blog</a>.</p>\n\n<h2>Preface</h2>\n\n<p>Let’s start with the term “Isomorphic application”. An isomorphic JavaScript application is just a JavaScript application that can run both client-side and server-side (in most cases it is a single-page application that can be run on server). I do not like the word “isomorphic”, I believe that programmers should struggle complexity (not only in code) and the word “isomorphic” complicates understanding, therefore it increases complexity :). There is another name for isomorphic JavaScript - “Universal JavaScript”, but in my opinion the word “Universal” is too general. So, in this post, I will use the word “isomorphic” ( even if do not like it :) ).</p>\n\n<p>How do people see an isomorphic app? You can find diagramms in the internet like this one:</p>\n\n<p><img src=\"http://blog.koorchik.com/isomorphic-react/isomorphic_separated.png\" alt=\"\"></p>\n\n<p>But ideally it should look a little bit different:</p>\n\n<p><img src=\"http://blog.koorchik.com/isomorphic-react/isomorphic_joined.png\" alt=\"\"></p>\n\n<p>I mean, not less than 90% of your code should be reused. In large apps it can be even more than 95%.</p>\n\n<p>This article is not a tutorial. There are enough of them on the Internet. It is always more interesting to look at real production app. A lot of tutorials and boilerplates show how to write isomorphic ReactJS applications, but they do not cover a lot of real-life problems we’ve faced in production. So we decided to share our experience at github and develop the app in a public repo. Here is <a href=\"http://itsquiz.com/en/activations\">the running app</a> and here is <a href=\"https://github.com/webbylab/itsquiz-wall\">its code</a>.</p>\n\n<p><strong>IMPORTANT</strong>: This is real-world application, so it is always evolving. Our goal is to make working product within a limited amount of time. Sometimes, we have no time for finding the best possible solution, but use just suitable variant in our case.</p>\n\n<p>If you want to develop isomorphic app from scratch, then start with reading this tutorial <a href=\"https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4\">“Handcrafting an Isomorphic Redux Application (With Love)”</a>. It is really great!</p>\n\n<h2>About the app</h2>\n\n<p>In <a href=\"http://webbylab.com\">WebbyLab</a> we use React from the moment it was open sourced by Facebook almost in every our project. We’ve created keynote clone, excel clone, a lot of hybrid mobile applications, UI for a social monitoring system, comment moderation system, ticket booking system, a lot of admin UIs and more. Sometimes we make isomorphic apps too. The fundamental difference between regular SPA and isomorphic SPA is that in isomorphic SPA you will process several requests simultaneously, therefore you should somehow deal with a global user-dependent state (like current language, flux stores state etc).</p>\n\n<p><a href=\"http://itsquiz.com/en/activations\">itsquiz.com</a> is one of our projects written in ReactJS. itsquiz.com is a cloud testing platform with a lot of amazing features. And one of the key features of the product is a public quizzes catalogue (aka “quizwall”), any user can publish his own tests there and pass others’. For example, you can go there and <a href=\"http://itsquiz.com/en/activations/5660a8795b8300236895bef5\">test your knowledge of ReactJS</a>.</p>\n\n<p><em>You can watch 1 minute promo video to better understand the idea of the product:</em></p>\n\n<p><a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=eiougg2UhYA\"><img src=\"http://img.youtube.com/vi/eiougg2UhYA/0.jpg\" alt=\"IMAGE ALT TEXT HERE\" width=\"480\" height=\"320\" border=\"10\"></a></p>\n\n<p>Here are key requirements to Quizwall:</p>\n\n<ol>\n<li>Content is available without authorization.</li>\n<li>It should be indexable by search engines.</li>\n<li>It should have social networks sharing features.</li>\n<li>It should support different languages.</li>\n<li>It should work fast</li>\n</ol>\n\n<p>Writing isomorphic application is the simplest and the most suitable solution in this case.</p>\n\n<h2>What parts of your app should be isomorphic?</h2>\n\n<ol>\n<li>Isomorphic view</li>\n<li>Isomorphic styles</li>\n<li>Isomorphic routing</li>\n<li>Isomorphic data fetching</li>\n<li>Isomorphic configuration</li>\n<li>Isomorphic localization</li>\n</ol>\n\n<p>Let’s go one after another.</p>\n\n<h3>Isomorphic view (Joy #1)</h3>\n\n<p>This is the simplest part. It is simple because Facebook developers solved this problem already in ReactJS. The only thing we should do is to take React Js library and use it according to documentation.</p>\n\n<p>Client code:</p>\n<div><pre><code><span>import</span> <span>ReactDOM</span> <span>from</span> <span>'react-dom'</span><span>;</span>\n<span>import</span> <span>App</span>      <span>from</span> <span>'./App'</span><span>;</span>\n\n<span>ReactDOM</span><span>.</span><span>render</span><span>(</span>\n    <span>&lt;</span><span>App</span> <span>/&gt;</span><span>,</span>\n    <span>document</span><span>.</span><span>getElementById</span><span>(</span><span>'react-view'</span><span>)</span>\n<span>);</span>\n\n</code></pre></div>\n<p>Server code:</p>\n<div><pre><code>\n\n<span>import</span> <span>ReactDOM</span> <span>from</span> <span>'react-dom/server'</span><span>;</span>\n<span>import</span> <span>App</span>      <span>from</span> <span>'./App'</span><span>;</span>\n\n<span>const</span> <span>componentHTML</span> <span>=</span> <span>ReactDOM</span><span>.</span><span>renderToString</span><span>(</span>\n    <span>&lt;</span><span>App</span> <span>/&gt;</span>\n<span>);</span>\n\n<span>const</span> <span>html</span> <span>=</span> <span>`</span>\n    <span>&lt;</span><span>html</span><span>&gt;</span>\n        <span>&lt;</span><span>head</span><span>&gt;</span>\n            <span>&lt;</span><span>title</span><span>&gt;</span><span>Quiz</span> <span>Wall</span><span>&lt;</span><span>/title</span><span>&gt;\n</span>        <span>&lt;</span><span>/head</span><span>&gt;\n</span>        <span>&lt;</span><span>body</span><span>&gt;</span>\n            <span>&lt;</span><span>div</span> <span>id</span><span>=</span><span>\"react-view\"</span><span>&gt;</span><span>$</span><span>{</span><span>componentHTML</span><span>}</span><span>&lt;</span><span>/div</span><span>&gt;\n</span>        <span>&lt;</span><span>/body</span><span>&gt;\n</span>    <span>&lt;</span><span>/html</span><span>&gt;\n`</span><span>;</span>\n\n<span>res</span><span>.</span><span>end</span><span>(</span><span>html</span><span>)</span>\n</code></pre></div>\n<p>As you see, we just use “ReactDOM.renderToString” instead of “ReactDOM.render”. That’s it. Nothing complex and you can find this in any tutorial.</p>\n\n<h3>Isomorphic styles</h3>\n\n<p>Usually tutorials omit this. And this is the first place where you start to feel pain ;).</p>\n\n<h4>Pain #1: styles import</h4>\n\n<p>We use webpack and usually we import component specific styles in component itself. For example, if we have a component named “Footer.jsx” then we will have less file named “Footer.less” in the same folder. And “Footer.jsx” will import “Footer.less”. The component will have class by its name (“Footer”) and all styles will be namespaced by this class.</p>\n\n<p>Here is a small example:</p>\n<div><pre><code><span>import</span> <span>React</span> <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>'./Footer.less'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>class</span> <span>Footer</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span> <span>{</span>\n    <span>render</span><span>()</span> <span>{</span>\n        <span>return</span> <span>(</span>\n            <span>&lt;</span><span>div</span> <span>className</span><span>=</span><span>'Footer'</span><span>&gt;</span>\n                <span>&lt;</span><span>small</span><span>&gt;</span>\n                    <span>Developed</span> <span>by</span>\n                    <span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>'http://webbylab.com'</span> <span>target</span><span>=</span><span>'_blank'</span><span>&gt;</span>\n                        <span>WebbyLab</span>\n                    <span>&lt;</span><span>/a</span><span>&gt;\n</span>                <span>&lt;</span><span>/small</span><span>&gt;\n</span>            <span>&lt;</span><span>/div</span><span>&gt;\n</span>        <span>);</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre></div>\n<p>Such approach makes our code more modular. Moreover, if we import a component it will automatically import its dependencies (js libs, styles, other assets). Webpack is responsible for handling all file types. So, we have self-contained components.</p>\n\n<p>This approach works great with webpack. But it will not work in pure nodejs, because you cannot import “less” files. So I’ve started looking for a solution.</p>\n\n<p>The first possible one was <a href=\"https://nodejs.org/api/globals.html#globals_require_extensions\">require.extensions</a> but</p>\n\n<ol>\n<li>Feature stability: 0</li>\n<li>Status: “deprecated”</li>\n<li>Does not work with babel-node. I am not sure why, more investigation required.</li>\n</ol>\n\n<p>So, I’ve started looking for another solution. The simplest one was using inline styles.</p>\n\n<p><strong>Inline styles</strong> .</p>\n\n<p>I’ve decided to try inline styles because:</p>\n\n<ol>\n<li>Inline styles have no problems with server side import. They can be saved in json files.</li>\n<li><a href=\"https://facebook.github.io/react/tips/inline-styles.html\">React supports inline styles</a></li>\n<li>Inline styles solve a lot of CSS issues without hacks - <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">React: CSS in JS by vjeux</a></li>\n</ol>\n\n<p>There are several issues I’ve faced using them:</p>\n\n<ol>\n<li>You should emulate pseudo css attributes like :hover, :active, :focus with JavaScript.</li>\n<li>You should manage vendor prefixes by your own</li>\n<li>You should emulate media queries with JavaScript</li>\n<li>You need to merge styles some way. (with css you usually just mention several classes names)</li>\n</ol>\n\n<p>I’ve found a great tool for working with inline styles called <a href=\"http://projects.formidablelabs.com/radium/\">Radium</a>. It is great tool which solves all mentioned issues if you develop SPA.</p>\n\n<h4>Pain #2: automatic vendor prefixing based on browser DOM</h4>\n\n<p>We’ve switched to Radium but when we run our application in isomorphic mode we received strange warnings.</p>\n\n<p><img src=\"http://blog.koorchik.com/isomorphic-react/markup-error.png\" alt=\"\"></p>\n\n<p>“React injected new markup to compensate which works but you have lost many of the benefits of server rendering.” No, I want all the benefits of server rendering. We run the same code on a server and a client, so why react generates different markup? The problem is with Radium automatic vendor prefixing. Radium creates DOM element to detect list of css properties that should have vendor prefixes.</p>\n\n<p>Here is the issue on Github <a href=\"https://github.com/FormidableLabs/radium/issues/201\">“Prefixing breaks server rendering”</a>. Yes, there is a solution for it now: using Radium’s autoprefixer on client side and detect browser by user-agent and insert different prefixes (with <a href=\"https://github.com/rofrischmann/inline-style-prefixer\">inline-style-prefixer</a>) for requests from different browser on server. I tried, but that time the solution was not reliable. Maybe now it works better (you can check it by your own :)).</p>\n\n<p>The second problem is that you cannot use media queries. Your server does not have any information about your browser window size, resolution, orientation etc. Here is a <a href=\"https://github.com/FormidableLabs/radium/issues/53\">related issue</a>.</p>\n\n<p><strong>Solution that works</strong></p>\n\n<p>I’ve decided to switch back to <a href=\"http://lesscss.org/\">less</a> and <a href=\"http://getbem.com/\">BEM</a> but with condititional import.</p>\n<div><pre><code><span>import</span> <span>React</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>if</span> <span>(</span> <span>process</span><span>.</span><span>env</span><span>.</span><span>BROWSER</span> <span>)</span> <span>{</span>\n    <span>require</span><span>(</span><span>'./Footer.less'</span><span>);</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> <span>class</span> <span>Footer</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span> <span>{</span>\n    <span>render</span><span>()</span> <span>{</span>\n        <span>return</span> <span>(</span>\n            <span>&lt;</span><span>div</span> <span>className</span><span>=</span><span>'Footer'</span><span>&gt;</span> <span>&lt;</span><span>/div</span><span>&gt;\n</span>        <span>);</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre></div>\n<p>You see that we are using “require” instead of “import” to make it runtime dependendant, so nodejs will not require it when you run code on server.</p>\n\n<p>One more thing we need to do is to define process.env.BROWSER in our webpack config. It can be done in the following way:</p>\n<div><pre><code><span>var</span> <span>webpack</span> <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>);</span>\n\n<span>module</span><span>.</span><span>exports</span> <span>=</span> <span>{</span>\n    <span>entry</span><span>:</span> <span>\"./client/app.js\"</span><span>,</span>\n    <span>plugins</span><span>:</span> <span>[</span>\n        <span>new</span> <span>webpack</span><span>.</span><span>DefinePlugin</span><span>({</span>\n            <span>\"process.env\"</span><span>:</span> <span>{</span>\n                <span>BROWSER</span><span>:</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>true</span><span>)</span>\n            <span>}</span>\n        <span>}),</span>\n        <span>new</span> <span>ExtractTextPlugin</span><span>(</span><span>\"[name].css\"</span><span>)</span>\n    <span>],</span>\n    <span>// ...</span>\n<span>};</span>\n</code></pre></div>\n<p>You can find whole <a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/webpack.config.js\">production config on github</a>.</p>\n\n<p>Alternative solution is to create a plugin for babel that will just return “{}” on the server. I am not sure that it possible to do. If you can create babel-stub-plugin - it will be awesome.</p>\n\n<p><strong>UPDATE: We’ve switched to the alternative solution after migrating to Babel 6</strong></p>\n\n<p>We use <a href=\"https://www.npmjs.com/package/babel-plugin-transform-require-ignore\">babel-plugin-transform-require-ignore</a> plugin for Babel 6. Special thanks to @morlay (Morlay Null) for the plugin.</p>\n\n<p>All you need is to configure file extentions that should be ignored by babel in  <a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/.babelrc\">.babelrc</a></p>\n<div><pre><code><span>\"env\"</span><span>:</span> <span>{</span>\n   <span>\"node\"</span><span>:</span> <span>{</span>\n     <span>\"plugins\"</span><span>:</span> <span>[</span>\n       <span>[</span>\n         <span>\"babel-plugin-transform-require-ignore\"</span><span>,</span> <span>{</span> <span>\"extensions\"</span><span>:</span> <span>[</span><span>\".less\"</span><span>,</span> <span>\".css\"</span><span>]</span> <span>}</span>\n       <span>]</span>\n     <span>]</span>\n   <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p>and set environment variable BABEL_ENV=‘node’ before starting your app. So, you can start your app like that <a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/7fb861ca09a4759b1b3622ab69d0cd610303da8e/package.json#L14\"><code>cross-env BABEL_ENV=&#39;node&#39; nodemon server/runner.js</code></a>.</p>\n\n<h4>Pain #3: Material UI uses vendor prefixing based on browser DOM</h4>\n\n<p>Ok. Let’s go further. We managed our styles. And it seems that the problems with styles are solved. We use <a href=\"http://material-ui.com/\">Material UI</a> components library for our UI and we like it. But the problem with it is that it uses the same approach to vendor autoprefixing as Radium.</p>\n\n<p>So we had to switch to the Material Design Lite. We use <a href=\"https://www.npmjs.com/package/react-mdl\">react-mdl</a> wrapper for React.</p>\n\n<p>Great, it seems that we definitely solved all of the problems related to styling… sorry, not this time.</p>\n\n<h4>Pain #3: Assets loading order</h4>\n\n<p>Webpack will generate a javascript bundle for you and will pack all css files to the same bundle. It is not a problem in SPA - you just load the bundle and start your app. With isomorphic SPA everything is not so obvious.</p>\n\n<p>Firstly, it is a good idea to move your bundle.js to the end of markup. In this case, user will not wait untill large (it can be several megabytes) bundle.js is loaded. A browser will render HTML immediately.</p>\n<div><pre><code><span>&lt;html&gt;</span>\n    <span>&lt;head&gt;</span>\n        <span>&lt;title&gt;</span>Quiz Wall<span>&lt;/title&gt;</span>\n    <span>&lt;/head&gt;</span>\n    <span>&lt;body&gt;</span>\n        <span>&lt;div</span> <span>id=</span><span>\"react-view\"</span><span>&gt;</span>${componentHTML}<span>&lt;/div&gt;</span>\n\n        <span>&lt;script </span><span>type=</span><span>\"application/javascript\"</span> <span>src=</span><span>\"/build/bundle.js\"</span><span>&gt;&lt;/script&gt;</span>\n    <span>&lt;/body&gt;</span>\n<span>&lt;/html&gt;</span>\n</code></pre></div>\n<p>This works. But moving the bundle.js to the end also moves styles to the end (as they are packed into the same bundle). So, a browser will render markup without CSS and after that it will load bundle.js (with CSS in it) and only after that it will apply styles. In this case, you will get blinking UI.</p>\n\n<p>Therefore, the right way is to split your bundle into two parts and load everything in the following order:</p>\n\n<ol>\n<li>Load CSS</li>\n<li>Load components HTML markup</li>\n<li>Load JS</li>\n</ol>\n<div><pre><code><span>&lt;html&gt;</span>\n    <span>&lt;head&gt;</span>\n        <span>&lt;title&gt;</span>Quiz Wall<span>&lt;/title&gt;</span>\n        <span>&lt;link</span> <span>rel=</span><span>\"stylesheet\"</span> <span>href=</span><span>\"/build/bundle.css\"</span><span>&gt;</span>\n    <span>&lt;/head&gt;</span>\n    <span>&lt;body&gt;</span>\n        <span>&lt;div</span> <span>id=</span><span>\"react-view\"</span><span>&gt;</span>${componentHTML}<span>&lt;/div&gt;</span>\n\n        <span>&lt;script </span><span>type=</span><span>\"application/javascript\"</span> <span>src=</span><span>\"/build/bundle.js\"</span><span>&gt;&lt;/script&gt;</span>\n    <span>&lt;/body&gt;</span>\n<span>&lt;/html&gt;</span>\n</code></pre></div>\n<p>And the cool thing about webpack is that it has a lot of plugins and loaders. We use <a href=\"https://www.npmjs.com/package/extract-text-webpack-plugin\">extract-text-webpack-plugin</a> to extract css to a separate bundle.</p>\n\n<p>Your config will look similar to this one.</p>\n<div><pre><code><span>var</span> <span>webpack</span> <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>);</span>\n<span>var</span> <span>ExtractTextPlugin</span> <span>=</span> <span>require</span><span>(</span><span>\"extract-text-webpack-plugin\"</span><span>);</span>\n\n<span>module</span><span>.</span><span>exports</span> <span>=</span> <span>{</span>\n    <span>entry</span><span>:</span> <span>\"./client/app.js\"</span><span>,</span>\n    <span>plugins</span><span>:</span> <span>[</span>\n        <span>new</span> <span>ExtractTextPlugin</span><span>(</span><span>\"[name].css\"</span><span>)</span>\n    <span>],</span>\n    <span>output</span><span>:</span> <span>{</span>\n        <span>path</span><span>:</span> <span>__dirname</span> <span>+</span> <span>'/public/build/'</span><span>,</span>\n        <span>filename</span><span>:</span> <span>\"bundle.js\"</span><span>,</span>\n        <span>publicPath</span><span>:</span> <span>\"build/\"</span>\n    <span>},</span>\n    <span>module</span><span>:</span> <span>{</span>\n        <span>loaders</span><span>:</span> <span>[</span>\n            <span>{</span>\n                <span>test</span><span>:</span> <span>/</span><span>\\.</span><span>less$/</span><span>,</span>\n                <span>loader</span><span>:</span> <span>ExtractTextPlugin</span><span>.</span><span>extract</span><span>(</span><span>\"style-loader\"</span><span>,</span> <span>\"css-loader!autoprefixer-loader!less-loader\"</span><span>)</span>\n            <span>}</span>\n        <span>]</span>\n    <span>}</span>\n<span>};</span>\n\n</code></pre></div>\n<p>You can find whole <a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/webpack.config.js\">production webpack config on github</a>.</p>\n\n<h3>Isomorphic routing</h3>\n\n<h4>Joy #2 - React Router</h4>\n\n<p>React router starting from version 1.0.0 works greatly in isomorphic environment. But there are a lot of outdated tutorials written when react-router-1.0.0 was still in beta. Don’t worry, official documentation has <a href=\"https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md\">working example of server-side routing</a>.</p>\n\n<h3>Isomorphic data fetching</h3>\n\n<h4>Joy #3 - Redux</h4>\n\n<p><a href=\"https://github.com/rackt/redux\">Redux</a> is another library that works greatly in isomorphic environment. The main issues with isomorphic apps:\n1. Server processes several requests simultaneously. So, you should have isolated state for each request. No singleton flux stores in this case.\n2. You should create new stores for each request.\n3. You should dump all stores states at the end of request processing and pass this states to the browser. So, a browser will be able to fill existing flux stores with received state and rerender React tree.</p>\n\n<p>With redux it can be done easily:\n1. Just one store\n2. react-redux uses react context to pass request related store way down by react components tree\n3. redux store has convenient API for dumping and restoring store state.</p>\n\n<p><a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/server/app.js\">Here you can find working code</a></p>\n\n<h3>Data fetching</h3>\n\n<p>You should write code that works both on the server and on the client. Usually in SPAs (even not isomorphic) we write API layer which can be used on the server too. This layer is responsible for all communications with the REST API. It can be packed as separate library for using it in third-party projects.</p>\n\n<p>Here is an example that works both on server and on client:</p>\n<div><pre><code><span>'use strict'</span><span>;</span>\n\n<span>import</span> <span>apiFactory</span> <span>from</span> <span>'./api'</span><span>;</span>\n\n<span>const</span> <span>api</span> <span>=</span> <span>apiFactory</span><span>({</span>\n    <span>apiPrefix</span><span>:</span> <span>'http://itsquiz.com/api/v1'</span>\n<span>});</span>\n\n<span>// Can be use in a following manner</span>\n<span>const</span> <span>promise</span> <span>=</span> <span>api</span><span>.</span><span>users</span><span>.</span><span>list</span><span>();</span>\n</code></pre></div>\n<p>For making http request you can use something like <a href=\"https://www.npmjs.com/package/axios\">axios</a> but I prefer <a href=\"https://www.npmjs.com/package/isomorphic-fetch\">isomorphic-fetch</a> which uses <a href=\"\">whatwg-fetch</a> (from Github) in browser or <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> on server.\n“fetch” is a <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">standard</a> that is already <a href=\"http://caniuse.com/#search=fetch\">supported by firefox and chrome</a> natively.</p>\n\n<p>It is the easy part. More complex part is not to create api library but to use it in isomorphic environment.</p>\n\n<p><strong>How client usually works</strong></p>\n\n<ol>\n<li>React component rendering.</li>\n<li>Show loading spinner</li>\n<li>Fetch all the component (pgge) dependent data</li>\n<li>Update the page (rerender React component with fetched data)</li>\n</ol>\n\n<p>So, the idea is simple. A user will wait for data but will not wait for UI response. So, you should render immediately without data and show spinner and show the data when it was fetched.</p>\n\n<p><strong>How server usually works</strong></p>\n\n<ol>\n<li>Preload all required data for the page</li>\n<li>Render the page (with data) to string</li>\n<li>Send HTML markup to client</li>\n</ol>\n\n<p>We want to write the same code for two scenarios. How do we handle this?\nThe idea is simple. We use action creators and they trigger data fetching. So, we should describe all page dependencies - action creators that will be used for data fetching.</p>\n\n<p>The isomorphic part of code will look like:</p>\n<div><pre><code><span>'use strict'</span><span>;</span>\n\n<span>import</span> <span>React</span>               <span>from</span> <span>'react'</span><span>;</span>\n<span>import</span> <span>{</span> <span>connect</span> <span>}</span>         <span>from</span> <span>'react-redux'</span><span>;</span>\n<span>import</span> <span>{</span> <span>loadActivations</span> <span>}</span> <span>from</span> <span>'actions/activations'</span><span>;</span>\n<span>import</span> <span>connectDataFetchers</span> <span>from</span> <span>'lib/connectDataFetchers.jsx'</span><span>;</span>\n\n<span>import</span> <span>ActivationsPage</span> <span>from</span> <span>'components/pages/ActivationsPage.jsx'</span><span>;</span>\n\n<span>class</span> <span>ActivationsPageContainer</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span> <span>{</span>\n    <span>render</span><span>()</span> <span>{</span>\n        <span>return</span> <span>(</span>\n            <span>&lt;</span><span>ActivationsPage</span>\n                <span>activations</span> <span>=</span> <span>{</span><span>this</span><span>.</span><span>props</span><span>.</span><span>activations</span><span>}</span>\n                <span>search</span>      <span>=</span> <span>{</span><span>this</span><span>.</span><span>props</span><span>.</span><span>search</span><span>}</span>\n                <span>onItemClick</span> <span>=</span> <span>{</span><span>this</span><span>.</span><span>handleQuizCardClick</span><span>}</span>\n                <span>onSearch</span>    <span>=</span> <span>{</span><span>this</span><span>.</span><span>handleSearch</span><span>}</span>\n            <span>/</span><span>&gt;\n</span>        <span>);</span>\n    <span>}</span>\n<span>}</span>\n\n<span>export</span> <span>default</span> <span>connect</span><span>({</span><span>activations</span> <span>:</span> <span>state</span><span>.</span><span>activations</span><span>})(</span>\n    <span>connectDataFetchers</span><span>(</span><span>ActivationsPageContainer</span><span>,</span> <span>[</span> <span>loadActivations</span> <span>])</span>\n<span>);</span>\n</code></pre></div>\n<p>So, you should wrap your component in another one which will be responsible for data fetching. We use “connectDataFetchers” function for it. It takes React component class and array of references to action creators.</p>\n\n<p><strong>How it works?</strong></p>\n\n<p>In browser the wrapper component will call action creators in <strong>componentDidMount</strong> lifecycle hook.  So, it is a common pattern for SPA.</p>\n\n<p><em>IMPORTANT: componentWillMount is not suitable for this because it will be invoked on the client and server. componentDidMount will be invoked only on the client.</em></p>\n\n<p>On the server we do this in a different way. We have a function <a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/server/utils.js#L12\">“fetchComponentsData”</a> which takes an array of components you are going to render and calls static method “fetchData” on each. One important thing is a usage of promises. We use promises to postpone rendering until the required data is fetched and saved to the redux store.</p>\n\n<p>“connectDataFetchers” is extremely simple:</p>\n<div><pre><code>\n<span>import</span> <span>React</span> <span>from</span> <span>'react'</span><span>;</span>\n\n<span>let</span> <span>IS_FIRST_MOUNT_AFTER_LOAD</span> <span>=</span> <span>true</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>function</span> <span>connectDataFetchers</span><span>(</span><span>Component</span><span>,</span> <span>actionCreators</span><span>)</span> <span>{</span>\n    <span>return</span> <span>class</span> <span>DataFetchersWrapper</span> <span>extends</span> <span>React</span><span>.</span><span>Component</span> <span>{</span>\n        <span>static</span> <span>fetchData</span><span>({</span> <span>dispatch</span><span>,</span> <span>params</span> <span>=</span> <span>{},</span> <span>query</span> <span>=</span> <span>{}</span> <span>})</span> <span>{</span>\n            <span>return</span> <span>Promise</span><span>.</span><span>all</span><span>(</span>\n                <span>actionCreators</span><span>.</span><span>map</span><span>(</span><span>actionCreator</span> <span>=&gt;</span> <span>dispatch</span><span>(</span><span>actionCreator</span><span>({</span> <span>params</span><span>,</span> <span>query</span> <span>})))</span>\n            <span>);</span>\n        <span>}</span>\n\n        <span>componentDidMount</span><span>()</span> <span>{</span>\n            <span>// If the component is mounted first time</span>\n            <span>// do no fetch data as it is already fetched on the server.</span>\n            <span>if</span> <span>(</span><span>!</span><span>IS_FIRST_MOUNT_AFTER_LOAD</span><span>)</span> <span>{</span>\n                <span>this</span><span>.</span><span>_fetchDataOnClient</span><span>();</span>\n            <span>}</span>\n\n            <span>IS_FIRST_MOUNT_AFTER_LOAD</span> <span>=</span> <span>false</span><span>;</span>\n        <span>}</span>\n\n        <span>componentDidUpdate</span><span>(</span><span>prevProps</span><span>)</span> <span>{</span>\n            <span>// Refetch data if url was changed but the component is the same</span>\n\n            <span>const</span> <span>{</span> <span>location</span> <span>}</span> <span>=</span> <span>this</span><span>.</span><span>props</span><span>;</span>\n            <span>const</span> <span>{</span> <span>location</span><span>:</span> <span>prevLocation</span> <span>}</span> <span>=</span> <span>prevProps</span><span>;</span>\n\n            <span>const</span> <span>isUrlChanged</span> <span>=</span> <span>(</span><span>location</span><span>.</span><span>pathname</span> <span>!==</span> <span>prevLocation</span><span>.</span><span>pathname</span><span>)</span>\n                              <span>||</span> <span>(</span><span>location</span><span>.</span><span>search</span> <span>!==</span> <span>prevLocation</span><span>.</span><span>search</span><span>);</span>\n\n            <span>if</span> <span>(</span><span>isUrlChanged</span><span>)</span> <span>{</span>\n                <span>this</span><span>.</span><span>_fetchDataOnClient</span><span>();</span>\n            <span>}</span>\n        <span>}</span>\n\n        <span>_fetchDataOnClient</span><span>()</span> <span>{</span>\n            <span>DataFetchersWrapper</span><span>.</span><span>fetchData</span><span>({</span>\n                <span>dispatch</span> <span>:</span> <span>this</span><span>.</span><span>props</span><span>.</span><span>dispatch</span><span>,</span>\n                <span>params</span>   <span>:</span> <span>this</span><span>.</span><span>props</span><span>.</span><span>params</span><span>,</span>\n                <span>query</span>    <span>:</span> <span>this</span><span>.</span><span>props</span><span>.</span><span>location</span><span>.</span><span>query</span>\n            <span>});</span>\n        <span>}</span>\n\n        <span>render</span><span>()</span> <span>{</span>\n            <span>return</span> <span>(</span>\n                <span>&lt;</span><span>Component</span> <span>{...</span><span>this</span><span>.</span><span>props</span><span>}</span> <span>/</span><span>&gt;\n</span>            <span>);</span>\n        <span>}</span>\n    <span>};</span>\n<span>}</span>\n\n</code></pre></div>\n<p><a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/shared/lib/connectDataFetchers.jsx\">Production version</a> a little bit longer. It passes locale information and has propTypes described.</p>\n\n<p>So, on server our code looks like:</p>\n<div><pre><code>\n<span>// On every request</span>\n<span>const</span> <span>store</span> <span>=</span> <span>configureStore</span><span>();</span>\n\n<span>match</span><span>({</span> <span>routes</span><span>,</span> <span>location</span><span>:</span> <span>req</span><span>.</span><span>url</span> <span>},</span> <span>(</span><span>error</span><span>,</span> <span>redirectLocation</span><span>,</span> <span>{</span><span>components</span><span>,</span> <span>params</span><span>,</span> <span>location</span><span>})</span> <span>=&gt;</span> <span>{</span>\n    <span>fetchComponentsData</span><span>(</span><span>store</span><span>.</span><span>dispatch</span><span>,</span> <span>components</span><span>,</span> <span>params</span><span>,</span> <span>location</span><span>.</span><span>query</span><span>).</span><span>then</span><span>(()</span> <span>=&gt;</span> <span>{</span>\n        <span>const</span> <span>componentHTML</span> <span>=</span> <span>ReactDOM</span><span>.</span><span>renderToString</span><span>(</span>\n            <span>&lt;</span><span>Provider</span> <span>store</span><span>=</span><span>{</span><span>store</span><span>}</span><span>&gt;</span>\n                <span>&lt;</span><span>RoutingContext</span> <span>{...</span><span>renderProps</span><span>}</span><span>/</span><span>&gt;\n</span>            <span>&lt;</span><span>/Provider</span><span>&gt;\n</span>        <span>);</span>\n\n        <span>return</span> <span>renderHTML</span><span>({</span>\n            <span>componentHTML</span><span>,</span>\n            <span>initialState</span><span>:</span> <span>store</span><span>.</span><span>getState</span><span>()</span>\n        <span>});</span>\n    <span>});</span>\n<span>});</span>\n</code></pre></div>\n<p><a href=\"https://github.com/WebbyLab/itsquiz-wall/blob/master/server/app.js\">Here is the whole server app</a></p>\n\n<h3>Isomorphic configuration</h3>\n\n<p>The simplest way it to use “config.json” and require it wherever needed. And you can find that a lot of people are doing so. In my opinion, this is a bad solution for isomorphic SPA.</p>\n\n<p>What wrong with it?</p>\n\n<p>The problem is that when you require “config.json” webpack will pack it into your bundle.</p>\n\n<ol>\n<li>You cannot change config without rebuilding the app. It is not an option for me because I want to use the same build on staging and later on production the only difference is configuration options.</li>\n<li>You can have inconsistent config state. Backend sees the new one, but frontend does not see changes because the config is packed into the bundle.</li>\n</ol>\n\n<p>The solution is to leave config outside the bundle and place it in some sort of global variable that can be set in index.html.</p>\n\n<p>We load out config on the server and return it in index.html</p>\n<div><pre><code><span>&lt;div</span> <span>id=</span><span>\"react-view\"</span><span>&gt;</span>${componentHTML}<span>&lt;/div&gt;</span>\n\n<span>&lt;script </span><span>type=</span><span>\"application/javascript\"</span><span>&gt;</span>\n    <span>window</span><span>.</span><span>__CONFIG__</span> <span>=</span> <span>$</span><span>{</span><span>serializeJs</span><span>(</span><span>config</span><span>,</span> <span>{</span> <span>isJSON</span><span>:</span> <span>true</span> <span>})};</span>\n    <span>window</span><span>.</span><span>__INITIAL_STATE__</span> <span>=</span> <span>$</span><span>{</span><span>serializeJs</span><span>(</span><span>initialState</span><span>,</span> <span>{</span> <span>isJSON</span><span>:</span> <span>true</span> <span>})};</span>\n<span>&lt;/script&gt;</span>\n\n<span>&lt;script </span><span>type=</span><span>\"application/javascript\"</span> <span>src=</span><span>\"${config.staticUrl}/static/build/main.js\"</span><span>&gt;&lt;/script&gt;</span>\n</code></pre></div>\n<p><em>IMPORTANT:  Serialization of initialState with JSON.stringify will make your application vulnerable to XSS attacks!!! You should use <a href=\"https://github.com/yahoo/serialize-javascript\">serialize-javascript</a> instead!</em></p>\n\n<p>But depending on a global variable in your code is not a good idea. So, we create “config.js” module that just exports global variable. And our code depends on “config.js” module.  Our “config.js” should be isomorphic, so on the server we just require json file.</p>\n<div><pre><code><span>// config.js</span>\n\n<span>if</span> <span>(</span><span>process</span><span>.</span><span>env</span><span>.</span><span>BROWSER</span><span>)</span> <span>{</span>\n    <span>module</span><span>.</span><span>exports</span> <span>=</span> <span>window</span><span>.</span><span>__CONFIG__</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n    <span>module</span><span>.</span><span>exports</span> <span>=</span> <span>require</span><span>(</span><span>'../etc/client-config.json'</span><span>);</span>\n<span>}</span>\n</code></pre></div>\n<p>and we use the “config.js” in the following manner in our isomorphic code:</p>\n<div><pre><code><span>'use strict'</span><span>;</span>\n\n<span>import</span> <span>config</span>     <span>from</span> <span>'./config'</span><span>;</span>\n<span>import</span> <span>apiFactory</span> <span>from</span> <span>'./api'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>apiFactory</span><span>({</span>\n    <span>apiPrefix</span><span>:</span> <span>config</span><span>.</span><span>apiPrefix</span>\n<span>});</span>\n</code></pre></div>\n<h3>Isomorphic localization</h3>\n\n<p>Very few tutorials explain how to deal with localization in a regular SPA. No tutorials at all say how to deal with localization in an isomorphic environment. In general, it is not an issue for most of the developers because there is no need to support other languages except English. But it is really important topic, so I’ve decided to describe localization issues in the separate post. It will be end to end React applications localization guide (including isomorphic issues).</p>\n\n<h2>Statistics</h2>\n\n<ul>\n<li>Universal (isomorphic) code - 2396 SLOC (93.3%)</li>\n<li>Client specific code - 33 SLOC (1.2%)</li>\n<li>Server specific code - 139 SLOC (5.4%)</li>\n</ul>\n\n<p>While all codebase growths, isomorphic part of the code growths the most. So, code reuse rate will become higher with time.</p>","categories":[]}];

const news = {
  type: new List(NewsItemType),
  resolve() {
    return items;
  },
};

export default news;
